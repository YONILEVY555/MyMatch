{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\pages\\\\search_match\\\\components\\\\Viewer_network_visualization\\\\ViewerNetworkVisualization.js\";\nimport React, { Component } from 'react';\nimport GridSystem from './component/GridSystem.js';\nimport DrawArrows from './component/DrawArrows.js';\nimport Xarrow from \"react-xarrows\";\nimport { Image } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ViewerNetworkVisualization = props => {\n  const BuildPathesForGridSystem = (pathes, optionMatch) => {\n    const gridSystemPathesIndex = [[\"12\", \"6\", \"2\", \"1\"], [\"13\", \"8\", \"9\", \"3\"], [\"18\", \"23\", \"24\", \"29\"], [\"17\", \"22\", \"21\", \"26\"]];\n    const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {});\n    let z = 0;\n\n    for (let i = 0; i < pathes.length && i <= 3; i++) {\n      for (let j = 0; j < pathes[j].length; j++) {\n        if (j == pathes[j].length - 1) {\n          gridSystemPathesData[z++] = {\n            next: gridSystemPathesIndex[i][j + 1],\n            index: gridSystemPathesIndex[i][j],\n            content: pathes[i][j].image[0].content\n          };\n          gridSystemPathesData[z++] = {\n            next: null,\n            index: gridSystemPathesIndex[i][j + 1],\n            content: props.optionMatch.image[0].content\n          };\n        } else {\n          gridSystemPathesData[z++] = {\n            next: gridSystemPathesIndex[i][j + 1],\n            index: gridSystemPathesIndex[i][j],\n            content: pathes[i][j].image[0].content\n          };\n        }\n      }\n    }\n\n    return gridSystemPathesData;\n  };\n\n  let gridSystemPathesData;\n\n  if (props.pathes != null && props.optionMatch != null) {\n    gridSystemPathesData = BuildPathesForGridSystem(props.pathes, props.optionMatch);\n  } else {\n    gridSystemPathesData = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(GridSystem, {\n        colCount: 5,\n        rowcount: 6,\n        gridSystemPathesData: gridSystemPathesData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 18\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n_c = ViewerNetworkVisualization;\nexport default ViewerNetworkVisualization;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewerNetworkVisualization\");","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/pages/search_match/components/Viewer_network_visualization/ViewerNetworkVisualization.js"],"names":["React","Component","GridSystem","DrawArrows","Xarrow","Image","ViewerNetworkVisualization","props","BuildPathesForGridSystem","pathes","optionMatch","gridSystemPathesIndex","gridSystemPathesData","Array","apply","map","z","i","length","j","next","index","content","image"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport GridSystem from './component/GridSystem.js';\r\nimport DrawArrows from './component/DrawArrows.js';\r\nimport Xarrow from \"react-xarrows\";\r\nimport {Image} from \"react-bootstrap\"\r\n\r\nexport const ViewerNetworkVisualization = (props) => {\r\n\r\n    const BuildPathesForGridSystem = (pathes, optionMatch) =>{\r\n\r\n        const gridSystemPathesIndex = [ [\"12\",\"6\",\"2\",\"1\"] , [\"13\",\"8\",\"9\",\"3\"] , [\"18\",\"23\",\"24\",\"29\"] , [\"17\",\"22\",\"21\",\"26\"] ]\r\n         \r\n        const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {})\r\n\r\n        let z = 0\r\n\r\n        for( let i = 0 ;i < pathes.length && i<=3; i++ ){\r\n            for(let j = 0 ;j < pathes[j].length; j++){\r\n                                   \r\n                if( j == (pathes[j].length -1) ){\r\n                    gridSystemPathesData[z++] = {next: gridSystemPathesIndex[i][j+1]  ,  index: gridSystemPathesIndex[i][j],  content: pathes[i][j].image[0].content}\r\n                    gridSystemPathesData[z++] = {next: null  ,  index: gridSystemPathesIndex[i][j+1],  content: props.optionMatch.image[0].content}\r\n                }\r\n                else{\r\n                    gridSystemPathesData[z++] = {next: gridSystemPathesIndex[i][j+1]  ,  index: gridSystemPathesIndex[i][j],  content: pathes[i][j].image[0].content }  \r\n                }\r\n            }\r\n        }\r\n        \r\n        return gridSystemPathesData;\r\n        \r\n    }\r\n\r\n    let gridSystemPathesData\r\n\r\n    if( props.pathes!= null && props.optionMatch!=null){\r\n        gridSystemPathesData =  BuildPathesForGridSystem(props.pathes,props.optionMatch)\r\n    }\r\n    else{\r\n        gridSystemPathesData =  null\r\n    }\r\n\r\n    return <>\r\n\r\n             <>\r\n\r\n                 {/* emptyOrfull={this.state.arr} */}\r\n\r\n                 <GridSystem colCount={5} rowcount={6} gridSystemPathesData={gridSystemPathesData} >          \r\n                     {/* {this.state.conection.map(c => <Image src={c.image} roundedCircle className=\"grid-image\" id={c.index} /> )}                                              */}\r\n                 </GridSystem>\r\n            \r\n                {/* <DrawArrows>\r\n                     {this.state.conection}\r\n                 </DrawArrows>  */}\r\n                \r\n             </>\r\n\r\n     </>\r\n\r\n}\r\n \r\nexport default ViewerNetworkVisualization"]},"metadata":{},"sourceType":"module"}