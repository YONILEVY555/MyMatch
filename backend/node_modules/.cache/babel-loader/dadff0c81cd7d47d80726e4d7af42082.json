{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\pages\\\\search_match\\\\components\\\\Viewer_network_visualization\\\\ViewerNetworkVisualization.js\";\nimport React, { Component } from 'react';\nimport GridSystem from './component/GridSystem.js';\nimport DrawArrows from './component/DrawArrows.js';\nimport Xarrow from \"react-xarrows\";\nimport { Image } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ViewerNetworkVisualization = props => {\n  // BuildDataForViewerNetworkVisualization = (pathes, optionMatch, myImages, startIndex) =>{\n  //     if( pathes!= null && optionMatch!=null){\n  //         const gridSystemPathesIndex = [ [\"12\",\"6\",\"2\",\"1\"] , [\"13\",\"8\",\"9\",\"3\"] , [\"18\",\"23\",\"24\",\"29\"] , [\"17\",\"22\",\"21\",\"26\"] ]\n  //         const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {})\n  //         let z = 0\n  //         if(startIndex >= pathes.length){\n  //             this.setState({initialIndexPathSearch: 0})\n  //             startIndex = 0;\n  //         }\n  //         for( let i = startIndex, w=0 ; i < pathes.length && i <= (startIndex+ 3) ; i++, w++ ){\n  //             for(let j = 0 ;j <= pathes[i].length; j++){\n  //                 if(j==0){\n  //                     gridSystemPathesData[z++] = { next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: myImages[0].content}\n  //                 }\n  //                 else{\n  //                     if( j == (pathes[i].length) ){\n  //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content}\n  //                         gridSystemPathesData[z++] = {next: null  ,  index: gridSystemPathesIndex[w][j+1],  content: optionMatch.image[0].content}\n  //                     }\n  //                     else{\n  //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content }  \n  //                     }\n  //                 }\n  //             }\n  //         }\n  //         return gridSystemPathesData.sort(( a, b ) => {\n  //                                                         if ( Number(a.index) < Number(b.index) ){\n  //                                                           return -1;\n  //                                                         }\n  //                                                         if ( Number(a.index) > Number(b.index) ){\n  //                                                           return 1;\n  //                                                         }\n  //                                                         return 0;\n  //                                                     });\n  //         }\n  //         else{\n  //             return null\n  //         }       \n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GridSystem, {\n        colCount: 5,\n        rowcount: 6,\n        gridSystemPathesData: props.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(DrawArrows, {\n        DrawArrowsData: props.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n_c = ViewerNetworkVisualization;\nexport default ViewerNetworkVisualization;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewerNetworkVisualization\");","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/pages/search_match/components/Viewer_network_visualization/ViewerNetworkVisualization.js"],"names":["React","Component","GridSystem","DrawArrows","Xarrow","Image","ViewerNetworkVisualization","props","data"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAAQC,KAAR,QAAoB,iBAApB;;;AAGA,OAAO,MAAMC,0BAA0B,GAAIC,KAAD,IAAW;AAE7C;AAEJ;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBAAO;AAAA,2BAEE;AAAA,8BAEI,QAAC,UAAD;AAAY,QAAA,QAAQ,EAAE,CAAtB;AAAyB,QAAA,QAAQ,EAAE,CAAnC;AAAsC,QAAA,oBAAoB,EAAEA,KAAK,CAACC;AAAlE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKG,QAAC,UAAD;AAAY,QAAA,cAAc,EAAID,KAAK,CAACC;AAApC;AAAA;AAAA;AAAA;AAAA,cALH;AAAA;AAFF,mBAAP;AAcH,CAjEM;KAAMF,0B;AAmEb,eAAeA,0BAAf","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport GridSystem from './component/GridSystem.js';\r\nimport DrawArrows from './component/DrawArrows.js';\r\nimport Xarrow from \"react-xarrows\";\r\nimport {Image} from \"react-bootstrap\"\r\n\r\n\r\nexport const ViewerNetworkVisualization = (props) => {\r\n\r\n        // BuildDataForViewerNetworkVisualization = (pathes, optionMatch, myImages, startIndex) =>{\r\n\r\n    //     if( pathes!= null && optionMatch!=null){\r\n            \r\n    //         const gridSystemPathesIndex = [ [\"12\",\"6\",\"2\",\"1\"] , [\"13\",\"8\",\"9\",\"3\"] , [\"18\",\"23\",\"24\",\"29\"] , [\"17\",\"22\",\"21\",\"26\"] ]\r\n             \r\n    //         const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {})\r\n        \r\n    //         let z = 0\r\n    \r\n    //         if(startIndex >= pathes.length){\r\n    //             this.setState({initialIndexPathSearch: 0})\r\n    //             startIndex = 0;\r\n    //         }\r\n\r\n    //         for( let i = startIndex, w=0 ; i < pathes.length && i <= (startIndex+ 3) ; i++, w++ ){\r\n    //             for(let j = 0 ;j <= pathes[i].length; j++){\r\n                \r\n    //                 if(j==0){\r\n    //                     gridSystemPathesData[z++] = { next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: myImages[0].content}\r\n    //                 }\r\n    //                 else{\r\n    //                     if( j == (pathes[i].length) ){\r\n    //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content}\r\n    //                         gridSystemPathesData[z++] = {next: null  ,  index: gridSystemPathesIndex[w][j+1],  content: optionMatch.image[0].content}\r\n    //                     }\r\n    //                     else{\r\n    //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content }  \r\n    //                     }\r\n\r\n    //                 }\r\n    //             }\r\n    //         }\r\n            \r\n    //         return gridSystemPathesData.sort(( a, b ) => {\r\n    //                                                         if ( Number(a.index) < Number(b.index) ){\r\n    //                                                           return -1;\r\n    //                                                         }\r\n    //                                                         if ( Number(a.index) > Number(b.index) ){\r\n    //                                                           return 1;\r\n    //                                                         }\r\n    //                                                         return 0;\r\n    //                                                     });\r\n    //         }\r\n    //         else{\r\n    //             return null\r\n    //         }       \r\n    // }\r\n\r\n    return <>\r\n\r\n             <>\r\n\r\n                 <GridSystem colCount={5} rowcount={6} gridSystemPathesData={props.data} >          \r\n                 </GridSystem>\r\n            \r\n                <DrawArrows DrawArrowsData = {props.data} >\r\n                </DrawArrows>  \r\n                \r\n             </>\r\n\r\n     </>\r\n\r\n}\r\n \r\nexport default ViewerNetworkVisualization"]},"metadata":{},"sourceType":"module"}