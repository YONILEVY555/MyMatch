{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\pages\\\\search_match\\\\components\\\\Viewer_network_visualization\\\\ViewerNetworkVisualization.js\";\nimport React, { Component } from 'react';\nimport GridSystem from './component/GridSystem.js';\nimport DrawArrows from './component/DrawArrows.js';\nimport Xarrow from \"react-xarrows\";\nimport { Image } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ViewerNetworkVisualization = props => {\n  //pathes, optionMatch, myImages, startIndex\n  const BuildDataForViewerNetworkVisualization = () => {\n    if (props.pathes != null && optionMatch != null) {\n      const gridSystemPathesIndex = [[\"12\", \"6\", \"2\", \"1\"], [\"13\", \"8\", \"9\", \"3\"], [\"18\", \"23\", \"24\", \"29\"], [\"17\", \"22\", \"21\", \"26\"]];\n      const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {});\n      let z = 0;\n\n      if (startIndex >= pathes.length) {\n        this.setState({\n          initialIndexPathSearch: 0\n        });\n        startIndex = 0;\n      }\n\n      for (let i = startIndex, w = 0; i < pathes.length && i <= startIndex + 3; i++, w++) {\n        for (let j = 0; j <= pathes[i].length; j++) {\n          if (j == 0) {\n            gridSystemPathesData[z++] = {\n              next: gridSystemPathesIndex[w][j + 1],\n              index: gridSystemPathesIndex[w][j],\n              content: myImages[0].content\n            };\n          } else {\n            if (j == pathes[i].length) {\n              gridSystemPathesData[z++] = {\n                next: gridSystemPathesIndex[w][j + 1],\n                index: gridSystemPathesIndex[w][j],\n                content: pathes[i][j - 1].image[0].content\n              };\n              gridSystemPathesData[z++] = {\n                next: null,\n                index: gridSystemPathesIndex[w][j + 1],\n                content: optionMatch.image[0].content\n              };\n            } else {\n              gridSystemPathesData[z++] = {\n                next: gridSystemPathesIndex[w][j + 1],\n                index: gridSystemPathesIndex[w][j],\n                content: pathes[i][j - 1].image[0].content\n              };\n            }\n          }\n        }\n      }\n\n      return gridSystemPathesData.sort((a, b) => {\n        if (Number(a.index) < Number(b.index)) {\n          return -1;\n        }\n\n        if (Number(a.index) > Number(b.index)) {\n          return 1;\n        }\n\n        return 0;\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GridSystem, {\n        colCount: 5,\n        rowcount: 6,\n        gridSystemPathesData: BuildDataForViewerNetworkVisualization()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(DrawArrows, {\n        DrawArrowsData: props.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n_c = ViewerNetworkVisualization;\nexport default ViewerNetworkVisualization;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewerNetworkVisualization\");","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/pages/search_match/components/Viewer_network_visualization/ViewerNetworkVisualization.js"],"names":["React","Component","GridSystem","DrawArrows","Xarrow","Image","ViewerNetworkVisualization","props","BuildDataForViewerNetworkVisualization","pathes","optionMatch","gridSystemPathesIndex","gridSystemPathesData","Array","apply","map","z","startIndex","length","setState","initialIndexPathSearch","i","w","j","next","index","content","myImages","image","sort","a","b","Number","data"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport GridSystem from './component/GridSystem.js';\r\nimport DrawArrows from './component/DrawArrows.js';\r\nimport Xarrow from \"react-xarrows\";\r\nimport {Image} from \"react-bootstrap\"\r\n\r\n\r\nexport const ViewerNetworkVisualization = (props) => {\r\n\r\n        //pathes, optionMatch, myImages, startIndex\r\n        const BuildDataForViewerNetworkVisualization = () =>{\r\n\r\n        if( props.pathes!= null && optionMatch!=null){\r\n            \r\n            const gridSystemPathesIndex = [ [\"12\",\"6\",\"2\",\"1\"] , [\"13\",\"8\",\"9\",\"3\"] , [\"18\",\"23\",\"24\",\"29\"] , [\"17\",\"22\",\"21\",\"26\"] ]\r\n             \r\n            const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {})\r\n        \r\n            let z = 0\r\n    \r\n            if(startIndex >= pathes.length){\r\n                this.setState({initialIndexPathSearch: 0})\r\n                startIndex = 0;\r\n            }\r\n\r\n            for( let i = startIndex, w=0 ; i < pathes.length && i <= (startIndex+ 3) ; i++, w++ ){\r\n                for(let j = 0 ;j <= pathes[i].length; j++){\r\n                \r\n                    if(j==0){\r\n                        gridSystemPathesData[z++] = { next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: myImages[0].content}\r\n                    }\r\n                    else{\r\n                        if( j == (pathes[i].length) ){\r\n                            gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content}\r\n                            gridSystemPathesData[z++] = {next: null  ,  index: gridSystemPathesIndex[w][j+1],  content: optionMatch.image[0].content}\r\n                        }\r\n                        else{\r\n                            gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content }  \r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return gridSystemPathesData.sort(( a, b ) => {\r\n                                                            if ( Number(a.index) < Number(b.index) ){\r\n                                                              return -1;\r\n                                                            }\r\n                                                            if ( Number(a.index) > Number(b.index) ){\r\n                                                              return 1;\r\n                                                            }\r\n                                                            return 0;\r\n                                                        });\r\n            }\r\n            else{\r\n                return null\r\n            }       \r\n    }\r\n\r\n    return <>\r\n\r\n             <>\r\n\r\n                 <GridSystem colCount={5} rowcount={6} gridSystemPathesData={BuildDataForViewerNetworkVisualization()} >          \r\n                 </GridSystem>\r\n            \r\n                <DrawArrows DrawArrowsData = {props.data} >\r\n                </DrawArrows>  \r\n                \r\n             </>\r\n\r\n     </>\r\n\r\n}\r\n \r\nexport default ViewerNetworkVisualization"]},"metadata":{},"sourceType":"module"}