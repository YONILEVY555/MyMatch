{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\pages\\\\search_match\\\\SearchMatch.jsx\";\nimport React, { Component } from 'react';\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\";\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\";\nimport { UserDataService } from '@api/index.js';\nimport AuthenticationService from '@services/AuthenticationService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SearchMatch extends Component {\n  constructor(props) {\n    //super(props)\n    this.state = {\n      id: AuthenticationService.getLoggedInUserId(),\n      optionMatches: null,\n      indexCurrentMatch: 0,\n      pathes: null,\n      DataForViewerNetworkVisualization: null\n    };\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  render() {\n    let optionMatch;\n    if (this.state.optionMatches != null) optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];else optionMatch = null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ViewerNetworkVisualization, {\n        data: this.state.DataForViewerNetworkVisualization\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ViewerPotenMatch, {\n        likeClicked: this.likeClicked,\n        backClicked: this.backClicked,\n        unlikeClicked: this.unlikeClicked,\n        optionMatch: optionMatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SearchMatch;","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/pages/search_match/SearchMatch.jsx"],"names":["React","Component","ViewerNetworkVisualization","ViewerPotenMatch","UserDataService","AuthenticationService","SearchMatch","constructor","props","state","id","getLoggedInUserId","optionMatches","indexCurrentMatch","pathes","DataForViewerNetworkVisualization","componentDidMount","refresh","render","optionMatch","likeClicked","backClicked","unlikeClicked"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,0BAAP,MAAuC,yEAAvC;AACA,OAAOC,gBAAP,MAA6B,oDAA7B;AACA,SAAQC,eAAR,QAA8B,eAA9B;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAEhCM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACb;AACE,SAAKC,KAAL,GAAa;AACLC,MAAAA,EAAE,EAAEL,qBAAqB,CAACM,iBAAtB,EADC;AAELC,MAAAA,aAAa,EAAE,IAFV;AAGLC,MAAAA,iBAAiB,EAAE,CAHd;AAILC,MAAAA,MAAM,EAAE,IAJH;AAKLC,MAAAA,iCAAiC,EAAE;AAL9B,KAAb;AAON;;AAEDC,EAAAA,iBAAiB,GAAE;AACd,SAAKC,OAAL;AACJ;;AAoGDC,EAAAA,MAAM,GAAG;AAEL,QAAIC,WAAJ;AAEA,QAAI,KAAKV,KAAL,CAAWG,aAAX,IAA4B,IAAhC,EACKO,WAAW,GAAG,KAAKV,KAAL,CAAWG,aAAX,CAAyB,KAAKH,KAAL,CAAWI,iBAApC,CAAd,CADL,KAGKM,WAAW,GAAG,IAAd;AAEL,wBACI;AAAA,8BAEG,QAAC,0BAAD;AAA4B,QAAA,IAAI,EAAE,KAAKV,KAAL,CAAWM;AAA7C;AAAA;AAAA;AAAA;AAAA,cAFH,eAIG,QAAC,gBAAD;AAAkB,QAAA,WAAW,EAAI,KAAKK,WAAtC;AACkB,QAAA,WAAW,EAAI,KAAKC,WADtC;AAEkB,QAAA,aAAa,EAAI,KAAKC,aAFxC;AAGkB,QAAA,WAAW,EAAIH;AAHjC;AAAA;AAAA;AAAA;AAAA,cAJH;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AAxI+B;;AA2IpC,eAAeb,WAAf","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\"\r\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\"\r\nimport {UserDataService} from '@api/index.js'\r\nimport AuthenticationService from '@services/AuthenticationService.js'\r\n\r\nclass SearchMatch extends Component {\r\n \r\n    constructor(props){\r\n         //super(props)\r\n           this.state = {\r\n                   id: AuthenticationService.getLoggedInUserId(),\r\n                   optionMatches: null,\r\n                   indexCurrentMatch: 0,\r\n                   pathes: null,\r\n                   DataForViewerNetworkVisualization: null\r\n            }\r\n    }\r\n\r\n    componentDidMount(){\r\n         this.refresh()\r\n    }\r\n\r\n    refresh = async () =>{\r\n    \r\n        const resOptionMatches = await UserDataService.getOptionMatches(this.state.id); \r\n        const resPathes = await UserDataService.getPathes(this.state.id, resOptionMatches.data[0].id ); \r\n        const DataForViewerNetworkVisualization =  this.BuildDataForViewerNetworkVisualization(resPathes.data,resOptionMatches.data[0]);\r\n\r\n        this.setState(\r\n            { \r\n                optionMatches: resOptionMatches.data,\r\n                pathes: resPathes.data,\r\n                DataForViewerNetworkVisualization: DataForViewerNetworkVisualization\r\n            }\r\n        )\r\n    }\r\n\r\n    likeClicked = () =>{\r\n        \r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch + 1}\r\n            ))\r\n        else{\r\n            this.setState(\r\n                { indexCurrentMatch: 0}\r\n            )\r\n        }    \r\n    }\r\n\r\n    backClicked = () =>{\r\n\r\n        if(this.state.indexCurrentMatch == 0 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: this.state.optionMatches.length -1}\r\n            ))\r\n        else{\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch - 1}\r\n            \r\n            ))\r\n        }\r\n    }\r\n\r\n    unlikeClicked = () =>{\r\n\r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch + 1}\r\n            ))\r\n        else{\r\n            this.setState(\r\n                { indexCurrentMatch: 0}\r\n            )\r\n        }  \r\n    }  \r\n\r\n    unlikeClicked = () =>{\r\n\r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch + 1}\r\n            ))\r\n        else{\r\n            this.setState(\r\n                { indexCurrentMatch: 0}\r\n            )\r\n        }  \r\n    } \r\n\r\n    BuildDataForViewerNetworkVisualization = (pathes, optionMatch) =>{\r\n\r\n        if( pathes!= null && optionMatch!=null){\r\n            \r\n            const gridSystemPathesIndex = [ [\"12\",\"6\",\"2\",\"1\"] , [\"13\",\"8\",\"9\",\"3\"] , [\"18\",\"23\",\"24\",\"29\"] , [\"17\",\"22\",\"21\",\"26\"] ]\r\n             \r\n            const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {})\r\n    \r\n            let z = 0\r\n    \r\n            for( let i = 0 ;i < pathes.length && i<=3; i++ ){\r\n                for(let j = 0 ;j < pathes[i].length; j++){\r\n                                       \r\n                    if( j == (pathes[j].length -1) ){\r\n                        gridSystemPathesData[z++] = {next: gridSystemPathesIndex[i][j+1]  ,  index: gridSystemPathesIndex[i][j],  content: pathes[i][j].image[0].content}\r\n                        gridSystemPathesData[z++] = {next: null  ,  index: gridSystemPathesIndex[i][j+1],  content: optionMatch.image[0].content}\r\n                    }\r\n                    else{\r\n                        gridSystemPathesData[z++] = {next: gridSystemPathesIndex[i][j+1]  ,  index: gridSystemPathesIndex[i][j],  content: pathes[i][j].image[0].content }  \r\n                    }\r\n                }\r\n            }\r\n            \r\n            return gridSystemPathesData;\r\n        }\r\n        else{\r\n            return null\r\n        }       \r\n    }\r\n\r\n    render() {\r\n\r\n        let optionMatch;\r\n\r\n        if( this.state.optionMatches != null )\r\n             optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];\r\n        else\r\n             optionMatch = null;\r\n\r\n        return (\r\n            <div>\r\n\r\n               <ViewerNetworkVisualization data={this.state.DataForViewerNetworkVisualization} /> \r\n                            \r\n               <ViewerPotenMatch likeClicked = {this.likeClicked} \r\n                                 backClicked = {this.backClicked}\r\n                                 unlikeClicked = {this.unlikeClicked}\r\n                                 optionMatch = {optionMatch} /> \r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchMatch"]},"metadata":{},"sourceType":"module"}