{"ast":null,"code":"import axios from \"axios\";\nimport { JPA_API_URL } from \"@utils/constants/Url.js\";\nimport PasswordHelpers from '@utils/helpers/PasswordHelpers.js';\nimport UserDataService from '@api/user/UserDataService.js';\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n  async executeAuthenticationService(PhoneOrEmail, password) {\n    const user = await UserDataService.retrieveUser(PhoneOrEmail);\n    PasswordHelpers.comparePassword(password, user.data.hashpassword);\n  }\n\n  createToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  registerSuccessfulLogin(phonenumber) {\n    sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME, phonenumber);\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserId() {\n    let id = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (id === null) return '';\n    return id;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/services/AuthenticationService.js"],"names":["axios","JPA_API_URL","PasswordHelpers","UserDataService","USER_NAME_ATTRIBUTE_NAME","AuthenticationService","executeAuthenticationService","PhoneOrEmail","password","user","retrieveUser","comparePassword","data","hashpassword","createToken","token","registerSuccessfulLogin","phonenumber","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","getItem","getLoggedInUserId","id"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,OAAO,MAAMC,wBAAwB,GAAG,mBAAjC;;AAEP,MAAMC,qBAAN,CAA2B;AAEW,QAA5BC,4BAA4B,CAACC,YAAD,EAAeC,QAAf,EAAyB;AAInD,UAAMC,IAAI,GAAG,MAAMN,eAAe,CAACO,YAAhB,CAA6BH,YAA7B,CAAnB;AAEDL,IAAAA,eAAe,CAACS,eAAhB,CAAgCH,QAAhC,EAAyCC,IAAI,CAACG,IAAL,CAAUC,YAAnD;AAEN;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,uBAAuB,CAACC,WAAD,EAAa;AAChCC,IAAAA,cAAc,CAACC,OAAf,CAAuBf,wBAAvB,EAAgDa,WAAhD;AACH;;AAEDG,EAAAA,MAAM,GAAE;AACJF,IAAAA,cAAc,CAACG,UAAf,CAA0BjB,wBAA1B;AACH;;AAEDkB,EAAAA,cAAc,GAAE;AACX,QAAIb,IAAI,GAAGS,cAAc,CAACK,OAAf,CAAuBnB,wBAAvB,CAAX;AAED,QAAGK,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAElB,WAAO,IAAP;AACH;;AAEDe,EAAAA,iBAAiB,GAAE;AAEf,QAAIC,EAAE,GAAGP,cAAc,CAACK,OAAf,CAAuBnB,wBAAvB,CAAT;AACA,QAAGqB,EAAE,KAAG,IAAR,EACI,OAAO,EAAP;AAEH,WAAOA,EAAP;AAEJ;;AAxCsB;;AA4C3B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["\r\nimport axios from \"axios\"\r\nimport {JPA_API_URL} from \"@utils/constants/Url.js\"\r\nimport PasswordHelpers from '@utils/helpers/PasswordHelpers.js'\r\nimport UserDataService from '@api/user/UserDataService.js'\r\n\r\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\"\r\n\r\nclass AuthenticationService{\r\n\r\n    async executeAuthenticationService(PhoneOrEmail, password) {\r\n\r\n        \r\n\r\n            const user = await UserDataService.retrieveUser(PhoneOrEmail)\r\n            \r\n           PasswordHelpers.comparePassword(password,user.data.hashpassword)\r\n        \r\n    }\r\n\r\n    createToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    registerSuccessfulLogin(phonenumber){\r\n        sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME,phonenumber);\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn(){\r\n         let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME)\r\n        \r\n        if(user === null) return false\r\n\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserId(){\r\n\r\n        let id = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\r\n        if(id===null) \r\n            return '';\r\n\r\n         return id;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}