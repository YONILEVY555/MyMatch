{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\Desktop\\\\Match\\\\backend\\\\src\\\\pages\\\\find_match\\\\FindMatch.jsx\";\nimport React, { Component } from 'react';\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\";\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\";\nimport { UserDataService } from '@api/index.js';\nimport AuthenticationService from '@services/AuthenticationService.js';\nimport { Color } from '@utils/constants/Color.js';\nimport { NewMatch } from './components/new_match/NewMatch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SearchMatch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.refresh = async () => {\n      var requestParam = {\n        params: {\n          type: \"M\",\n          status: \"S\"\n        }\n      };\n\n      try {\n        const resOptionMatches = await UserDataService.getOptionMatches(this.state.id);\n        const resPathes = await UserDataService.getPathes(this.state.id, resOptionMatches.data[0].id);\n        const resMyImages = await UserDataService.getImages(this.state.id);\n        const relationships = await UserDataService.getRelationships(this.state.id, requestParam);\n        this.setState({\n          optionMatches: resOptionMatches.data,\n          pathes: resPathes.data,\n          myImages: resMyImages.data,\n          relationships: relationships.data,\n          isFoundOptionMatches: true\n        });\n      } catch (e) {\n        if (e.response.status === 404) {\n          this.setState({\n            isFoundOptionMatches: false\n          });\n        }\n      }\n    };\n\n    this.likeClicked = async () => {\n      let resPathes = null;\n      let newIndexCurrentMatch = 0;\n      this.createOrUpdateMatch();\n\n      if (this.state.indexCurrentMatch < this.state.optionMatches.length - 1) {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch + 1].id);\n        newIndexCurrentMatch = this.state.indexCurrentMatch + 1;\n      } else {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id);\n      }\n\n      this.setState({\n        indexCurrentMatch: newIndexCurrentMatch,\n        pathes: resPathes.data\n      });\n    };\n\n    this.backClicked = () => {\n      if (this.state.indexCurrentMatch == 0) this.setState(prevstate => ({\n        indexCurrentMatch: this.state.optionMatches.length - 1\n      }));else {\n        this.setState(prevstate => ({\n          indexCurrentMatch: prevstate.indexCurrentMatch - 1\n        }));\n      }\n    };\n\n    this.unlikeClicked = async () => {\n      let resPathes = null;\n      let newIndexCurrentMatch = 0;\n\n      if (this.state.indexCurrentMatch < this.state.optionMatches.length - 1) {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch + 1].id);\n        newIndexCurrentMatch = this.state.indexCurrentMatch + 1;\n      } else {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id);\n      }\n\n      this.setState({\n        indexCurrentMatch: newIndexCurrentMatch,\n        pathes: resPathes.data\n      });\n    };\n\n    this.getMorePathes = () => {\n      this.setState(prevstate => ({\n        initialIndexPathSearch: prevstate.initialIndexPathSearch + 4\n      }));\n    };\n\n    this.createOrUpdateMatch = async () => {\n      const isFullMatch = this.isFullMatch(this.state.relationships, this.state.optionMatches[this.state.indexCurrentMatch].id);\n      var requestParam = {\n        params: {\n          userId: Number(this.state.id),\n          otherId: this.state.optionMatches[this.state.indexCurrentMatch].id,\n          type: 'MATCH',\n          status: ''\n        }\n      };\n\n      if (isFullMatch) {\n        this.createFullMatch(requestParam);\n      } else {\n        this.createPartialMatch(requestParam);\n      }\n    };\n\n    this.createFullMatch = async requestParam => {\n      requestParam.params.status = 'ACTIVE';\n      await UserDataService.updateRelationship(this.state.id, requestParam);\n      this.setState({\n        flagNewMatch: true\n      });\n      await this.makeTimer();\n    };\n\n    this.makeTimer = async () => {\n      return new Promise((resolve, reject) => {\n        if (this.state.flagNewMatch) {\n          setInterval(() => {\n            this.setState({\n              flagNewMatch: false\n            });\n            return resolve({\n              result: true\n            });\n          }, 5000);\n        }\n      });\n    };\n\n    this.createPartialMatch = async requestParam => {\n      requestParam.params.status = 'STANDBY';\n      await UserDataService.createRelationship(this.state.id, requestParam);\n    };\n\n    this.isFullMatch = (relationships, optionMatchId) => {\n      for (let i = 0; i < relationships.length; i++) {\n        if (relationships[i].source.id == optionMatchId || relationships[i].target.id == optionMatchId) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.updateInitialIndexPathSearchToZero = () => {\n      this.setState({\n        initialIndexPathSearch: 0\n      });\n    };\n\n    this.getOptionMatch = () => {\n      let optionMatch;\n      if (this.state.optionMatches != null) optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];else optionMatch = null;\n      return optionMatch;\n    };\n\n    this.getPrevOptionMatch = () => {\n      let PrevOptionMatch;\n\n      if (this.state.optionMatches != null) {\n        if (this.state.indexCurrentMatch == 0) {\n          return null;\n        } else {\n          PrevOptionMatch = this.state.optionMatches[this.state.indexCurrentMatch - 1];\n        }\n      } else {\n        return null;\n      }\n\n      return PrevOptionMatch;\n    };\n\n    this.state = {\n      id: AuthenticationService.getLoggedInUserId(),\n      optionMatches: null,\n      indexCurrentMatch: 0,\n      indexCurrentRelationShip: 0,\n      pathes: null,\n      myImages: null,\n      initialIndexPathSearch: 0,\n      relationships: null,\n      flagNewMatch: false,\n      isFoundOptionMatches: false\n    };\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  render() {\n    const optionMatch = this.getOptionMatch();\n    const prevOptionMatch = this.getPrevOptionMatch();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!this.state.flagNewMatch && /*#__PURE__*/_jsxDEV(ViewerNetworkVisualization, {\n        pathes: this.state.pathes,\n        optionMatch: optionMatch,\n        myImages: this.state.myImages,\n        startIndex: this.state.initialIndexPathSearch,\n        updateInitialIndexPathSearchToZero: this.updateInitialIndexPathSearchToZero\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 49\n      }, this), !this.state.flagNewMatch && /*#__PURE__*/_jsxDEV(ViewerPotenMatch, {\n        likeClicked: this.likeClicked,\n        backClicked: this.backClicked,\n        unlikeClicked: this.unlikeClicked,\n        getMorePathes: this.getMorePathes,\n        optionMatch: optionMatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 46\n      }, this), this.state.flagNewMatch && /*#__PURE__*/_jsxDEV(NewMatch, {\n        image: prevOptionMatch.image[0].content,\n        nameMatch: prevOptionMatch.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 45\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SearchMatch;","map":{"version":3,"sources":["C:/Users/yonil/Desktop/Match/backend/src/pages/find_match/FindMatch.jsx"],"names":["React","Component","ViewerNetworkVisualization","ViewerPotenMatch","UserDataService","AuthenticationService","Color","NewMatch","SearchMatch","constructor","props","refresh","requestParam","params","type","status","resOptionMatches","getOptionMatches","state","id","resPathes","getPathes","data","resMyImages","getImages","relationships","getRelationships","setState","optionMatches","pathes","myImages","isFoundOptionMatches","e","response","likeClicked","newIndexCurrentMatch","createOrUpdateMatch","indexCurrentMatch","length","backClicked","prevstate","unlikeClicked","getMorePathes","initialIndexPathSearch","isFullMatch","userId","Number","otherId","createFullMatch","createPartialMatch","updateRelationship","flagNewMatch","makeTimer","Promise","resolve","reject","setInterval","result","createRelationship","optionMatchId","i","source","target","updateInitialIndexPathSearchToZero","getOptionMatch","optionMatch","getPrevOptionMatch","PrevOptionMatch","getLoggedInUserId","indexCurrentRelationShip","componentDidMount","render","prevOptionMatch","image","content","username"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\"\r\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\"\r\nimport {UserDataService} from '@api/index.js'\r\nimport AuthenticationService from '@services/AuthenticationService.js'\r\nimport {Color} from '@utils/constants/Color.js'\r\nimport {NewMatch} from './components/new_match/NewMatch'\r\n\r\nclass SearchMatch extends Component {\r\n \r\n    constructor(props){\r\n         super(props)\r\n           this.state = {\r\n                   id: AuthenticationService.getLoggedInUserId(),\r\n                   optionMatches: null,\r\n                   indexCurrentMatch: 0,\r\n                   indexCurrentRelationShip: 0,\r\n                   pathes: null,\r\n                   myImages: null,\r\n                   initialIndexPathSearch: 0,\r\n                   relationships: null,\r\n                   flagNewMatch: false,\r\n                   isFoundOptionMatches: false\r\n            }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n         this.refresh()\r\n    }\r\n\r\n    refresh = async () =>{\r\n\r\n        var requestParam = {\r\n            params: {\r\n              type: \"M\",\r\n              status: \"S\"\r\n            }\r\n        }\r\n    \r\n        try{\r\n            const resOptionMatches = await UserDataService.getOptionMatches(this.state.id); \r\n            const resPathes = await UserDataService.getPathes(this.state.id, resOptionMatches.data[0].id ); \r\n            const resMyImages = await UserDataService.getImages(this.state.id);\r\n            const relationships = await UserDataService.getRelationships(this.state.id,requestParam);\r\n            \r\n            this.setState(\r\n                { \r\n                    optionMatches: resOptionMatches.data,\r\n                    pathes: resPathes.data,\r\n                    myImages: resMyImages.data, \r\n                    relationships: relationships.data,\r\n                    isFoundOptionMatches: true\r\n                }\r\n            )\r\n        }catch(e){\r\n\r\n            if(e.response.status === 404){\r\n                this.setState(\r\n                    { \r\n                        isFoundOptionMatches: false\r\n                    }\r\n                )\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    likeClicked = async () =>{\r\n        \r\n        let resPathes = null\r\n        let newIndexCurrentMatch = 0\r\n\r\n        this.createOrUpdateMatch();\r\n\r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 ){\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch+1].id )\r\n            newIndexCurrentMatch = this.state.indexCurrentMatch + 1 \r\n        }else{\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id )\r\n        }\r\n        \r\n        this.setState(\r\n                { \r\n                  indexCurrentMatch: newIndexCurrentMatch,\r\n                  pathes: resPathes.data \r\n                }\r\n        )\r\n    }\r\n\r\n    backClicked = () =>{\r\n\r\n        if(this.state.indexCurrentMatch == 0 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: this.state.optionMatches.length -1}\r\n            ))\r\n        else{\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch - 1}\r\n            \r\n            ))\r\n        }\r\n    }\r\n\r\n    unlikeClicked = async () =>{\r\n\r\n        let resPathes = null\r\n        let newIndexCurrentMatch = 0\r\n\r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 ){\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch+1].id )\r\n            newIndexCurrentMatch = this.state.indexCurrentMatch + 1 \r\n        }else{\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id )\r\n        }\r\n        \r\n        this.setState(\r\n                { \r\n                  indexCurrentMatch: newIndexCurrentMatch,\r\n                  pathes: resPathes.data \r\n                }\r\n        ) \r\n\r\n    }  \r\n     \r\n    getMorePathes = () =>{\r\n\r\n        this.setState(prevstate => (\r\n            { \r\n                initialIndexPathSearch: prevstate.initialIndexPathSearch + 4,\r\n            }\r\n        ))\r\n\r\n    }\r\n\r\n    createOrUpdateMatch = async () =>{\r\n\r\n        const isFullMatch = this.isFullMatch(this.state.relationships, this.state.optionMatches[this.state.indexCurrentMatch].id)\r\n\r\n        var requestParam = {\r\n            params: {\r\n                userId: Number(this.state.id) ,\r\n                otherId: this.state.optionMatches[this.state.indexCurrentMatch].id,\r\n                type: 'MATCH' ,\r\n                status: '' \r\n            }\r\n        }\r\n\r\n        if( isFullMatch ){\r\n            this.createFullMatch(requestParam)\r\n        }else{\r\n            this.createPartialMatch(requestParam)\r\n        }\r\n\r\n    }\r\n\r\n    createFullMatch = async (requestParam) =>{\r\n\r\n        requestParam.params.status = 'ACTIVE'\r\n\r\n        await UserDataService.updateRelationship(this.state.id,requestParam);\r\n\r\n        this.setState({\r\n            flagNewMatch: true\r\n        })\r\n\r\n        await this.makeTimer()\r\n\r\n    }\r\n\r\n    makeTimer = async () =>{\r\n\r\n        return new Promise( (resolve, reject) =>{\r\n            if(this.state.flagNewMatch){\r\n                setInterval(() => {\r\n                    this.setState({\r\n                        flagNewMatch: false\r\n                    })\r\n                    return resolve ({result:true})\r\n                  }, 5000)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    createPartialMatch = async (requestParam) =>{\r\n        requestParam.params.status = 'STANDBY'\r\n        await UserDataService.createRelationship(this.state.id,requestParam);\r\n    }\r\n\r\n    isFullMatch = (relationships, optionMatchId) =>{\r\n\r\n        for( let i=0; i< relationships.length; i++ ){\r\n            if( relationships[i].source.id == optionMatchId || relationships[i].target.id == optionMatchId){\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n\r\n    }\r\n\r\n    updateInitialIndexPathSearchToZero = () =>{\r\n        this.setState({initialIndexPathSearch: 0})\r\n    }\r\n\r\n    getOptionMatch = () =>{\r\n\r\n        let optionMatch\r\n\r\n        if( this.state.optionMatches != null )\r\n            optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];\r\n       else\r\n            optionMatch = null;\r\n\r\n        return  optionMatch\r\n\r\n    }\r\n\r\n    getPrevOptionMatch = () =>{\r\n\r\n        let PrevOptionMatch\r\n\r\n        if( this.state.optionMatches != null ){\r\n            if( this.state.indexCurrentMatch == 0){\r\n                return null\r\n            }\r\n            else{\r\n                PrevOptionMatch = this.state.optionMatches[this.state.indexCurrentMatch - 1];\r\n            }\r\n        }else{\r\n            return null\r\n        }\r\n    \r\n        return  PrevOptionMatch\r\n    }\r\n\r\n    render() {\r\n\r\n        const optionMatch = this.getOptionMatch();\r\n        const prevOptionMatch = this.getPrevOptionMatch();\r\n\r\n        return (\r\n            <div>\r\n               \r\n               { (!this.state.flagNewMatch ) && <ViewerNetworkVisualization pathes={this.state.pathes} \r\n                                                                         optionMatch={optionMatch}\r\n                                                                         myImages={this.state.myImages} \r\n                                                                         startIndex={this.state.initialIndexPathSearch}\r\n                                                                         updateInitialIndexPathSearchToZero = {this.updateInitialIndexPathSearchToZero} />} \r\n\r\n               { !this.state.flagNewMatch && <ViewerPotenMatch likeClicked = {this.likeClicked} \r\n                                                               backClicked = {this.backClicked}\r\n                                                               unlikeClicked = {this.unlikeClicked}\r\n                                                               getMorePathes = {this.getMorePathes}\r\n                                                               optionMatch = {optionMatch} />} \r\n\r\n                {this.state.flagNewMatch && <NewMatch image={prevOptionMatch.image[0].content} \r\n                                                      nameMatch={prevOptionMatch.username} />}\r\n                                          \r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchMatch"]},"metadata":{},"sourceType":"module"}