{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\pages\\\\test\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map()); // const [publicChats, setPublicChats] = useState([]); \n\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    }); // stompClient.subscribe('/chatroom/public', onMessageReceived);\n\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  }; // const onMessageReceived = (payload)=>{\n  //     var payloadData = JSON.parse(payload.body);\n  //     switch(payloadData.status){\n  //         case \"JOIN\":\n  //             if(!privateChats.get(payloadData.senderName)){\n  //                 privateChats.set(payloadData.senderName,[]);\n  //                 setPrivateChats(new Map(privateChats));\n  //             }\n  //             break;\n  //         case \"MESSAGE\":\n  //             // publicChats.push(payloadData);\n  //             // setPublicChats([...publicChats]);\n  //             break;\n  //     }\n  // }\n\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 34\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"uncscoCNGxiNLeSu4Xzr6Cb2/7A=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/pages/test/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","stompClient","ChatRoom","privateChats","setPrivateChats","Map","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","connect","Sock","onConnected","onError","subscribe","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","push","list","set","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","registerUser","keys","map","name","index","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {over} from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nvar stompClient =null;\r\nconst ChatRoom = () => {\r\n    const [privateChats, setPrivateChats] = useState(new Map());     \r\n    // const [publicChats, setPublicChats] = useState([]); \r\n    const [tab,setTab] =useState(\"CHATROOM\");\r\n    const [userData, setUserData] = useState({\r\n        username: '',\r\n        receivername: '',\r\n        connected: false,\r\n        message: ''\r\n      });\r\n    useEffect(() => {\r\n      console.log(userData);\r\n    }, [userData]);\r\n\r\n    const connect =()=>{\r\n        let Sock = new SockJS('http://localhost:8080/ws');\r\n        stompClient = over(Sock);\r\n        stompClient.connect({},onConnected, onError);\r\n    }\r\n\r\n    const onConnected = () => {\r\n        setUserData({...userData,\"connected\": true});\r\n        // stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n        stompClient.subscribe('/user/'+userData.username+'/private', onPrivateMessage);\r\n        userJoin();\r\n    }\r\n\r\n    const userJoin=()=>{\r\n          var chatMessage = {\r\n            senderName: userData.username,\r\n            status:\"JOIN\"\r\n          };\r\n          stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n    }\r\n\r\n    // const onMessageReceived = (payload)=>{\r\n    //     var payloadData = JSON.parse(payload.body);\r\n    //     switch(payloadData.status){\r\n    //         case \"JOIN\":\r\n    //             if(!privateChats.get(payloadData.senderName)){\r\n    //                 privateChats.set(payloadData.senderName,[]);\r\n    //                 setPrivateChats(new Map(privateChats));\r\n    //             }\r\n    //             break;\r\n    //         case \"MESSAGE\":\r\n    //             // publicChats.push(payloadData);\r\n    //             // setPublicChats([...publicChats]);\r\n    //             break;\r\n    //     }\r\n    // }\r\n    \r\n    const onPrivateMessage = (payload)=>{\r\n        console.log(payload);\r\n        var payloadData = JSON.parse(payload.body);\r\n        if(privateChats.get(payloadData.senderName)){\r\n            privateChats.get(payloadData.senderName).push(payloadData);\r\n            setPrivateChats(new Map(privateChats));\r\n        }else{\r\n            let list =[];\r\n            list.push(payloadData);\r\n            privateChats.set(payloadData.senderName,list);\r\n            setPrivateChats(new Map(privateChats));\r\n        }\r\n    }\r\n\r\n    const onError = (err) => {\r\n        console.log(err);\r\n        \r\n    }\r\n\r\n    const handleMessage =(event)=>{\r\n        const {value}=event.target;\r\n        setUserData({...userData,\"message\": value});\r\n    }\r\n    const sendValue=()=>{\r\n            if (stompClient) {\r\n              var chatMessage = {\r\n                senderName: userData.username,\r\n                message: userData.message,\r\n                status:\"MESSAGE\"\r\n              };\r\n              console.log(chatMessage);\r\n              stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n              setUserData({...userData,\"message\": \"\"});\r\n            }\r\n    }\r\n\r\n    const sendPrivateValue=()=>{\r\n        if (stompClient) {\r\n          var chatMessage = {\r\n            senderName: userData.username,\r\n            receiverName:tab,\r\n            message: userData.message,\r\n            status:\"MESSAGE\"\r\n          };\r\n          \r\n          if(userData.username !== tab){\r\n            privateChats.get(tab).push(chatMessage);\r\n            setPrivateChats(new Map(privateChats));\r\n          }\r\n          stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n          setUserData({...userData,\"message\": \"\"});\r\n        }\r\n    }\r\n\r\n    const handleUsername=(event)=>{\r\n        const {value}=event.target;\r\n        setUserData({...userData,\"username\": value});\r\n    }\r\n\r\n    const registerUser=()=>{\r\n        connect();\r\n    }\r\n    return (\r\n    <div className=\"container\">\r\n        {userData.connected?\r\n        <div className=\"chat-box\">\r\n            <div className=\"member-list\">\r\n                <ul>\r\n                    {[...privateChats.keys()].map((name,index)=>(\r\n                        <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"}`} key={index}>{name}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            {tab===\"CHATROOM\" && <div className=\"chat-content\">\r\n\r\n\r\n                <div className=\"send-message\">\r\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \r\n                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\r\n                </div>\r\n            </div> }\r\n            {tab!==\"CHATROOM\" && <div className=\"chat-content\">\r\n                <ul className=\"chat-messages\">\r\n                    {[...privateChats.get(tab)].map((chat,index)=>(\r\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                            <div className=\"message-data\">{chat.message}</div>\r\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n\r\n                <div className=\"send-message\">\r\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \r\n                    <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n        :\r\n        <div className=\"register\">\r\n            <input\r\n                id=\"user-name\"\r\n                placeholder=\"Enter your name\"\r\n                name=\"userName\"\r\n                value={userData.username}\r\n                onChange={handleUsername}\r\n                margin=\"normal\"\r\n              />\r\n              <button type=\"button\" onClick={registerUser}>\r\n                    connect\r\n              </button> \r\n        </div>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom"]},"metadata":{},"sourceType":"module"}