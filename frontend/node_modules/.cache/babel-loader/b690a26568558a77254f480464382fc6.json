{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username) {\n    sessionStorage.setItem('authenticatedUser', username);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'in28minutes';\n    let password = 'dummy';\n    let basicAuthHeaderString = 'Basic ' + window.btoa(`${username}:${password}`);\n    axios.interceptors.request.use(config => {\n      config.headers.authori;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/components/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","setupAxiosInterceptors","password","basicAuthHeaderString","window","btoa","interceptors","request","use","config","headers","authori"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA2B;AAEvBC,EAAAA,uBAAuB,CAACC,QAAD,EAAU;AAC7BC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CF,QAA3C;AACH;;AAEDG,EAAAA,MAAM,GAAE;AACJF,IAAAA,cAAc,CAACG,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AAEA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAElB,WAAO,IAAP;AAEH;;AAEDE,EAAAA,mBAAmB,GAAE;AAEjB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EACI,OAAO,EAAP;AAEH,WAAOA,IAAP;AAEJ;;AAEDG,EAAAA,sBAAsB,GAAE;AAEpB,QAAIT,QAAQ,GAAG,aAAf;AACA,QAAIU,QAAQ,GAAG,OAAf;AAEA,QAAIC,qBAAqB,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAa,GAAEb,QAAS,IAAGU,QAAS,EAApC,CAAvC;AAEAb,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACRA,MAAAA,MAAM,CAACC,OAAP,CAAeC,OAAf;AACH,KAHL;AAKH;;AAzCsB;;AA6C3B,eAAe,IAAIrB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nclass AuthenticationService{\r\n\r\n    registerSuccessfulLogin(username){\r\n        sessionStorage.setItem('authenticatedUser',username);\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        \r\n        if(user === null) return false\r\n\r\n        return true\r\n\r\n    }\r\n\r\n    getLoggedInUserName(){\r\n\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user===null) \r\n            return '';\r\n\r\n         return user;\r\n\r\n    }\r\n\r\n    setupAxiosInterceptors(){\r\n\r\n        let username = 'in28minutes'\r\n        let password = 'dummy'\r\n\r\n        let basicAuthHeaderString = 'Basic ' + window.btoa(`${username}:${password}`);\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                config.headers.authori\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}