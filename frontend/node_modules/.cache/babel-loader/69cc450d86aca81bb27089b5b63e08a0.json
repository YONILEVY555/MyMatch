{"ast":null,"code":"import PasswordHelpers from '@utils/helpers/PasswordHelpers.js';\nimport UserDataService from '@api/user/UserDataService.js';\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n  async executeAuthenticationService(PhoneOrEmail, password) {\n    return new Promise((resolve, reject) => {\n      UserDataService.retrieveUser(PhoneOrEmail).then(response => {\n        return resolve(PasswordHelpers.comparePassword(password, response.data.hashpassword));\n      }); // let user = null\n      // user = await UserDataService.retrieveUser(PhoneOrEmail)\n      // const result = PasswordHelpers.comparePassword(password,user.data.hashpassword)\n      // if(user!=null) return resolve(result);\n    });\n  }\n\n  createToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  registerSuccessfulLogin(phonenumber) {\n    sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME, phonenumber);\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserId() {\n    let id = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (id === null) return '';\n    return id;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/services/AuthenticationService.js"],"names":["PasswordHelpers","UserDataService","USER_NAME_ATTRIBUTE_NAME","AuthenticationService","executeAuthenticationService","PhoneOrEmail","password","Promise","resolve","reject","retrieveUser","then","response","comparePassword","data","hashpassword","createToken","token","registerSuccessfulLogin","phonenumber","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserId","id"],"mappings":"AAEA,OAAOA,eAAP,MAA4B,mCAA5B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,OAAO,MAAMC,wBAAwB,GAAG,mBAAjC;;AAEP,MAAMC,qBAAN,CAA2B;AAEW,QAA5BC,4BAA4B,CAACC,YAAD,EAAeC,QAAf,EAAyB;AAEvD,WAAO,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAErCR,MAAAA,eAAe,CAACS,YAAhB,CAA6BL,YAA7B,EACKM,IADL,CACYC,QAAD,IAAY;AACf,eAAOJ,OAAO,CAAER,eAAe,CAACa,eAAhB,CAAgCP,QAAhC,EAAyCM,QAAQ,CAACE,IAAT,CAAcC,YAAvD,CAAF,CAAd;AACP,OAHD,EAFqC,CAOrC;AAEA;AAEA;AAEA;AAED,KAfI,CAAP;AAgBH;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,uBAAuB,CAACC,WAAD,EAAa;AAChCC,IAAAA,cAAc,CAACC,OAAf,CAAuBnB,wBAAvB,EAAgDiB,WAAhD;AACH;;AAEDG,EAAAA,MAAM,GAAE;AACJF,IAAAA,cAAc,CAACG,UAAf,CAA0BrB,wBAA1B;AACH;;AAEDsB,EAAAA,cAAc,GAAE;AACX,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBxB,wBAAvB,CAAX;AAED,QAAGuB,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAElB,WAAO,IAAP;AACH;;AAEDE,EAAAA,iBAAiB,GAAE;AAEf,QAAIC,EAAE,GAAGR,cAAc,CAACM,OAAf,CAAuBxB,wBAAvB,CAAT;AACA,QAAG0B,EAAE,KAAG,IAAR,EACI,OAAO,EAAP;AAEH,WAAOA,EAAP;AAEJ;;AAlDsB;;AAsD3B,eAAe,IAAIzB,qBAAJ,EAAf","sourcesContent":["\r\n\r\nimport PasswordHelpers from '@utils/helpers/PasswordHelpers.js'\r\nimport UserDataService from '@api/user/UserDataService.js'\r\n\r\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\"\r\n\r\nclass AuthenticationService{\r\n\r\n    async executeAuthenticationService(PhoneOrEmail, password) {\r\n\r\n        return new Promise( (resolve, reject) => {\r\n\r\n            UserDataService.retrieveUser(PhoneOrEmail)\r\n                .then( (response)=>{\r\n                    return resolve (PasswordHelpers.comparePassword(password,response.data.hashpassword))\r\n            })\r\n\r\n            // let user = null\r\n\r\n            // user = await UserDataService.retrieveUser(PhoneOrEmail)\r\n            \r\n            // const result = PasswordHelpers.comparePassword(password,user.data.hashpassword)\r\n\r\n            // if(user!=null) return resolve(result);\r\n\r\n          });\r\n    }\r\n\r\n    createToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    registerSuccessfulLogin(phonenumber){\r\n        sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME,phonenumber);\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn(){\r\n         let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME)\r\n        \r\n        if(user === null) return false\r\n\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserId(){\r\n\r\n        let id = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\r\n        if(id===null) \r\n            return '';\r\n\r\n         return id;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}