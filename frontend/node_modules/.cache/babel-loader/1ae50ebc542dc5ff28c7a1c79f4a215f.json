{"ast":null,"code":"import axios from \"axios\";\nimport { JPA_API_URL } from \"@utils/constants/Url.js\";\nimport PasswordHelpers from '@utils/constants/helpers/PasswordHelpers.js';\nimport UserDataService from '@api/user/UserDataService.js';\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n  executeAuthenticationService(PhoneOrEmail, password) {\n    let result = n;\n    UserDataService.retrieveUser(PhoneOrEmail).then(response => {\n      result = PasswordHelpers.comparePassword(password, response.hashpassword);\n    });\n  }\n\n  createToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  registerSuccessfulLogin(phonenumber) {\n    sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME, phonenumber);\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/services/AuthenticationService.js"],"names":["axios","JPA_API_URL","PasswordHelpers","UserDataService","USER_NAME_ATTRIBUTE_NAME","AuthenticationService","executeAuthenticationService","PhoneOrEmail","password","result","n","retrieveUser","then","response","comparePassword","hashpassword","createToken","token","registerSuccessfulLogin","phonenumber","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,OAAO,MAAMC,wBAAwB,GAAG,mBAAjC;;AAEP,MAAMC,qBAAN,CAA2B;AAEvBC,EAAAA,4BAA4B,CAACC,YAAD,EAAeC,QAAf,EAAyB;AAEjD,QAAIC,MAAM,GAAGC,CAAb;AAEAP,IAAAA,eAAe,CAACQ,YAAhB,CAA6BJ,YAA7B,EACKK,IADL,CACYC,QAAD,IAAa;AAChBJ,MAAAA,MAAM,GAAGP,eAAe,CAACY,eAAhB,CAAgCN,QAAhC,EAAyCK,QAAQ,CAACE,YAAlD,CAAT;AACH,KAHL;AAOH;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,uBAAuB,CAACC,WAAD,EAAa;AAChCC,IAAAA,cAAc,CAACC,OAAf,CAAuBjB,wBAAvB,EAAgDe,WAAhD;AACH;;AAEDG,EAAAA,MAAM,GAAE;AACJF,IAAAA,cAAc,CAACG,UAAf,CAA0BnB,wBAA1B;AACH;;AAEDoB,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBtB,wBAAvB,CAAX;AAEA,QAAGqB,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAElB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAE;AAEjB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBtB,wBAAvB,CAAX;AACA,QAAGqB,IAAI,KAAG,IAAV,EACI,OAAO,EAAP;AAEH,WAAOA,IAAP;AAEJ;;AA3CsB;;AA+C3B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["\r\nimport axios from \"axios\"\r\nimport {JPA_API_URL} from \"@utils/constants/Url.js\"\r\nimport PasswordHelpers from '@utils/constants/helpers/PasswordHelpers.js'\r\nimport UserDataService from '@api/user/UserDataService.js'\r\n\r\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\"\r\n\r\nclass AuthenticationService{\r\n\r\n    executeAuthenticationService(PhoneOrEmail, password) {\r\n\r\n        let result = n\r\n\r\n        UserDataService.retrieveUser(PhoneOrEmail)\r\n            .then( (response) =>{\r\n                result = PasswordHelpers.comparePassword(password,response.hashpassword)\r\n            })\r\n\r\n\r\n\r\n    }\r\n\r\n    createToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    registerSuccessfulLogin(phonenumber){\r\n        sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME,phonenumber);\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME)\r\n        \r\n        if(user === null) return false\r\n\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName(){\r\n\r\n        let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\r\n        if(user===null) \r\n            return '';\r\n\r\n         return user;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}