{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\pages\\\\search_match\\\\SearchMatch.jsx\";\nimport React, { Component } from 'react';\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\";\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\";\nimport { UserDataService } from '@api/index.js';\nimport AuthenticationService from '@services/AuthenticationService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SearchMatch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.refresh = async () => {\n      const resOptionMatches = await UserDataService.getOptionMatches(this.state.id);\n      const resPathes = await UserDataService.getPathes(this.state.id, resOptionMatches.data[0].id);\n      const resMyImages = await UserDataService.getImages(this.state.id); //const DataForViewerNetworkVisualization =  this.BuildDataForViewerNetworkVisualization( resPathes.data, resOptionMatches.data[0], resMyImages.data, this.state.initialIndexPathSearch );\n\n      this.setState({\n        optionMatches: resOptionMatches.data,\n        pathes: resPathes.data,\n        //DataForViewerNetworkVisualization: DataForViewerNetworkVisualization,\n        myImages: resMyImages.data\n      });\n    };\n\n    this.likeClicked = async () => {\n      if (this.state.indexCurrentMatch < this.state.optionMatches.length - 1) this.setState(prevstate => ({\n        indexCurrentMatch: prevstate.indexCurrentMatch + 1,\n        pathes: this.updatePathes(prevstate.indexCurrentMatch + 1)\n      }));else {\n        this.setState({\n          indexCurrentMatch: 0,\n          pathes: this.updatePathes(0)\n        });\n      }\n    };\n\n    this.backClicked = () => {\n      if (this.state.indexCurrentMatch == 0) this.setState(prevstate => ({\n        indexCurrentMatch: this.state.optionMatches.length - 1\n      }));else {\n        this.setState(prevstate => ({\n          indexCurrentMatch: prevstate.indexCurrentMatch - 1\n        }));\n      }\n    };\n\n    this.unlikeClicked = () => {\n      if (this.state.indexCurrentMatch < this.state.optionMatches.length - 1) this.setState(prevstate => ({\n        indexCurrentMatch: prevstate.indexCurrentMatch + 1\n      }));else {\n        this.setState({\n          indexCurrentMatch: 0\n        });\n      }\n    };\n\n    this.getMorePathes = () => {\n      this.setState(prevstate => ({\n        initialIndexPathSearch: prevstate.initialIndexPathSearch + 4 //DataForViewerNetworkVisualization: this.BuildDataForViewerNetworkVisualization( this.state.pathes,this.state.optionMatches[this.state.indexCurrentMatch], this.state.myImages,  prevstate.initialIndexPathSearch + 4)\n\n      }));\n    };\n\n    this.updatePathes = async indexCurrentMatch => {\n      const optionMatchId = this.state.optionMatches[indexCurrentMatch].id;\n      const res = await UserDataService.getPathes(this.state.id, optionMatchId);\n      return res.data;\n    };\n\n    this.updateInitialIndexPathSearch = (startIndex, pathes) => {\n      if (startIndex >= pathes.length) {\n        this.setState({\n          initialIndexPathSearch: 0\n        });\n      }\n    };\n\n    this.state = {\n      id: AuthenticationService.getLoggedInUserId(),\n      optionMatches: null,\n      indexCurrentMatch: 0,\n      pathes: null,\n      myImages: null,\n      //DataForViewerNetworkVisualization: null,\n      initialIndexPathSearch: 0\n    };\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  // BuildDataForViewerNetworkVisualization = (pathes, optionMatch, myImages, startIndex) =>{\n  //     if( pathes!= null && optionMatch!=null){\n  //         const gridSystemPathesIndex = [ [\"12\",\"6\",\"2\",\"1\"] , [\"13\",\"8\",\"9\",\"3\"] , [\"18\",\"23\",\"24\",\"29\"] , [\"17\",\"22\",\"21\",\"26\"] ]\n  //         const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {})\n  //         let z = 0\n  //         if(startIndex >= pathes.length){\n  //             this.setState({initialIndexPathSearch: 0})\n  //             startIndex = 0;\n  //         }\n  //         for( let i = startIndex, w=0 ; i < pathes.length && i <= (startIndex+ 3) ; i++, w++ ){\n  //             for(let j = 0 ;j <= pathes[i].length; j++){\n  //                 if(j==0){\n  //                     gridSystemPathesData[z++] = { next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: myImages[0].content}\n  //                 }\n  //                 else{\n  //                     if( j == (pathes[i].length) ){\n  //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content}\n  //                         gridSystemPathesData[z++] = {next: null  ,  index: gridSystemPathesIndex[w][j+1],  content: optionMatch.image[0].content}\n  //                     }\n  //                     else{\n  //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content }  \n  //                     }\n  //                 }\n  //             }\n  //         }\n  //         return gridSystemPathesData.sort(( a, b ) => {\n  //                                                         if ( Number(a.index) < Number(b.index) ){\n  //                                                           return -1;\n  //                                                         }\n  //                                                         if ( Number(a.index) > Number(b.index) ){\n  //                                                           return 1;\n  //                                                         }\n  //                                                         return 0;\n  //                                                     });\n  //         }\n  //         else{\n  //             return null\n  //         }       \n  // }\n  render() {\n    let optionMatch;\n    if (this.state.optionMatches != null) optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];else optionMatch = null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ViewerNetworkVisualization, {\n        pathes: this.state.pathes,\n        optionMatch: optionMatch,\n        myImages: this.state.myImages,\n        startIndex: this.state.initialIndexPathSearch,\n        updateInitialIndexPathSearch: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ViewerPotenMatch, {\n        likeClicked: this.likeClicked,\n        backClicked: this.backClicked,\n        unlikeClicked: this.unlikeClicked,\n        getMorePathes: this.getMorePathes,\n        optionMatch: optionMatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SearchMatch;","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/pages/search_match/SearchMatch.jsx"],"names":["React","Component","ViewerNetworkVisualization","ViewerPotenMatch","UserDataService","AuthenticationService","SearchMatch","constructor","props","refresh","resOptionMatches","getOptionMatches","state","id","resPathes","getPathes","data","resMyImages","getImages","setState","optionMatches","pathes","myImages","likeClicked","indexCurrentMatch","length","prevstate","updatePathes","backClicked","unlikeClicked","getMorePathes","initialIndexPathSearch","optionMatchId","res","updateInitialIndexPathSearch","startIndex","getLoggedInUserId","componentDidMount","render","optionMatch"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\"\r\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\"\r\nimport {UserDataService} from '@api/index.js'\r\nimport AuthenticationService from '@services/AuthenticationService.js'\r\n\r\nclass SearchMatch extends Component {\r\n \r\n    constructor(props){\r\n         super(props)\r\n           this.state = {\r\n                   id: AuthenticationService.getLoggedInUserId(),\r\n                   optionMatches: null,\r\n                   indexCurrentMatch: 0,\r\n                   pathes: null,\r\n                   myImages: null,\r\n                   //DataForViewerNetworkVisualization: null,\r\n                   initialIndexPathSearch: 0 \r\n            }\r\n    }\r\n\r\n    componentDidMount(){\r\n         this.refresh()\r\n    }\r\n\r\n    refresh = async () =>{\r\n    \r\n        const resOptionMatches = await UserDataService.getOptionMatches(this.state.id); \r\n        const resPathes = await UserDataService.getPathes(this.state.id, resOptionMatches.data[0].id ); \r\n        const resMyImages = await UserDataService.getImages(this.state.id);\r\n        //const DataForViewerNetworkVisualization =  this.BuildDataForViewerNetworkVisualization( resPathes.data, resOptionMatches.data[0], resMyImages.data, this.state.initialIndexPathSearch );\r\n\r\n        this.setState(\r\n            { \r\n                optionMatches: resOptionMatches.data,\r\n                pathes: resPathes.data,\r\n                //DataForViewerNetworkVisualization: DataForViewerNetworkVisualization,\r\n                myImages: resMyImages.data \r\n            }\r\n        )\r\n    }\r\n\r\n    likeClicked = async () =>{\r\n        \r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 )\r\n            this.setState(prevstate => (\r\n                { \r\n                  indexCurrentMatch: prevstate.indexCurrentMatch + 1,\r\n                  pathes: this.updatePathes(prevstate.indexCurrentMatch + 1) \r\n                }\r\n            ))\r\n        else{\r\n            this.setState(\r\n                { \r\n                  indexCurrentMatch: 0,\r\n                  pathes: this.updatePathes(0) \r\n                }\r\n            )\r\n        }    \r\n    }\r\n\r\n    backClicked = () =>{\r\n\r\n        if(this.state.indexCurrentMatch == 0 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: this.state.optionMatches.length -1}\r\n            ))\r\n        else{\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch - 1}\r\n            \r\n            ))\r\n        }\r\n    }\r\n\r\n    unlikeClicked = () =>{\r\n\r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch + 1}\r\n            ))\r\n        else{\r\n            this.setState(\r\n                { indexCurrentMatch: 0}\r\n            )\r\n        }  \r\n    }  \r\n     \r\n    getMorePathes = () =>{\r\n\r\n        this.setState(prevstate => (\r\n            { \r\n                initialIndexPathSearch: prevstate.initialIndexPathSearch + 4,\r\n                //DataForViewerNetworkVisualization: this.BuildDataForViewerNetworkVisualization( this.state.pathes,this.state.optionMatches[this.state.indexCurrentMatch], this.state.myImages,  prevstate.initialIndexPathSearch + 4)\r\n            }\r\n        ))\r\n\r\n    }\r\n\r\n    updatePathes = async (indexCurrentMatch) =>{\r\n        const optionMatchId = this.state.optionMatches[indexCurrentMatch].id;\r\n        const res = await UserDataService.getPathes(this.state.id,optionMatchId)\r\n        return res.data\r\n    }\r\n\r\n    updateInitialIndexPathSearch = ( startIndex , pathes ) =>{\r\n        if( startIndex >=  pathes.length){\r\n                this.setState({initialIndexPathSearch: 0})\r\n        }\r\n    }\r\n\r\n    // BuildDataForViewerNetworkVisualization = (pathes, optionMatch, myImages, startIndex) =>{\r\n\r\n    //     if( pathes!= null && optionMatch!=null){\r\n            \r\n    //         const gridSystemPathesIndex = [ [\"12\",\"6\",\"2\",\"1\"] , [\"13\",\"8\",\"9\",\"3\"] , [\"18\",\"23\",\"24\",\"29\"] , [\"17\",\"22\",\"21\",\"26\"] ]\r\n             \r\n    //         const gridSystemPathesData = Array.apply(null, Array(30)).map(function () {})\r\n        \r\n    //         let z = 0\r\n    \r\n    //         if(startIndex >= pathes.length){\r\n    //             this.setState({initialIndexPathSearch: 0})\r\n    //             startIndex = 0;\r\n    //         }\r\n\r\n    //         for( let i = startIndex, w=0 ; i < pathes.length && i <= (startIndex+ 3) ; i++, w++ ){\r\n    //             for(let j = 0 ;j <= pathes[i].length; j++){\r\n                \r\n    //                 if(j==0){\r\n    //                     gridSystemPathesData[z++] = { next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: myImages[0].content}\r\n    //                 }\r\n    //                 else{\r\n    //                     if( j == (pathes[i].length) ){\r\n    //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content}\r\n    //                         gridSystemPathesData[z++] = {next: null  ,  index: gridSystemPathesIndex[w][j+1],  content: optionMatch.image[0].content}\r\n    //                     }\r\n    //                     else{\r\n    //                         gridSystemPathesData[z++] = {next: gridSystemPathesIndex[w][j+1]  ,  index: gridSystemPathesIndex[w][j],  content: pathes[i][j-1].image[0].content }  \r\n    //                     }\r\n\r\n    //                 }\r\n    //             }\r\n    //         }\r\n            \r\n    //         return gridSystemPathesData.sort(( a, b ) => {\r\n    //                                                         if ( Number(a.index) < Number(b.index) ){\r\n    //                                                           return -1;\r\n    //                                                         }\r\n    //                                                         if ( Number(a.index) > Number(b.index) ){\r\n    //                                                           return 1;\r\n    //                                                         }\r\n    //                                                         return 0;\r\n    //                                                     });\r\n    //         }\r\n    //         else{\r\n    //             return null\r\n    //         }       \r\n    // }\r\n\r\n    render() {\r\n\r\n        let optionMatch;\r\n\r\n        if( this.state.optionMatches != null )\r\n             optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];\r\n        else\r\n             optionMatch = null;\r\n\r\n        return (\r\n            <div>\r\n               \r\n               {/* <ViewerNetworkVisualization data={this.state.DataForViewerNetworkVisualization} />  */}\r\n\r\n               <ViewerNetworkVisualization pathes={this.state.pathes} \r\n                                           optionMatch={optionMatch}\r\n                                           myImages={this.state.myImages} \r\n                                           startIndex={this.state.initialIndexPathSearch}\r\n                                           updateInitialIndexPathSearch /> \r\n\r\n               <ViewerPotenMatch likeClicked = {this.likeClicked} \r\n                                 backClicked = {this.backClicked}\r\n                                 unlikeClicked = {this.unlikeClicked}\r\n                                 getMorePathes = {this.getMorePathes}\r\n                                 optionMatch = {optionMatch} /> \r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchMatch"]},"metadata":{},"sourceType":"module"}