{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\components\\\\GridSystem.js\";\nimport React from 'react';\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GridSystem = ({\n  colCount,\n  children\n}) => {\n  let rowcount = Math.floor(children.length / colCount) + 1;\n  let index = 0;\n  let index2 = 0;\n\n  const buildGrid = () => {\n    return renderRows();\n  };\n\n  const renderRows = () => {\n    let rows = [];\n\n    for (let row = 0; row < rowcount; row++) {\n      rows.push( /*#__PURE__*/_jsxDEV(Row, {\n        className: \"Row\",\n        children: renderCols()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this));\n    }\n\n    return rows;\n  };\n\n  const renderCols = () => {\n    let cols = [];\n\n    for (let col = 0; col < colCount; col++) {\n      if (index == children[index2].id) {\n        cols.push( /*#__PURE__*/_jsxDEV(Col, {\n          className: \"Col text-center\",\n          children: children[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this));\n        index2++;\n      } else {}\n\n      index++;\n    }\n\n    return cols;\n  };\n\n  return (\n    /*#__PURE__*/\n    // <Container className=\"container w-50 p-3 position-absolute sticky-top my1\">\n    _jsxDEV(Container, {\n      className: \"container w-50 p-3 position-absolute container-grid-syatem\",\n      children: buildGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_c = GridSystem;\nexport default GridSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridSystem\");","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/components/GridSystem.js"],"names":["React","Container","Row","Col","GridSystem","colCount","children","rowcount","Math","floor","length","index","index2","buildGrid","renderRows","rows","row","push","renderCols","cols","col","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,GAAnB,EAAwBC,GAAxB,QAAkC,iBAAlC;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AACzC,MAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,MAAT,GAAkBL,QAA7B,IAAyC,CAAxD;AACA,MAAIM,KAAK,GAAE,CAAX;AACA,MAAIC,MAAM,GAAE,CAAZ;;AAEA,QAAMC,SAAS,GAAG,MAAK;AAEnB,WAAQC,UAAU,EAAlB;AAEH,GAJD;;AAMA,QAAMA,UAAU,GAAG,MAAK;AACpB,QAAIC,IAAI,GAAG,EAAX;;AAEA,SAAI,IAAIC,GAAG,GAAG,CAAd,EAAgBA,GAAG,GAACT,QAApB,EAA6BS,GAAG,EAAhC,EAAmC;AAE/BD,MAAAA,IAAI,CAACE,IAAL,eACI,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBAEQC,UAAU;AAFlB;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;;AAED,WAAOH,IAAP;AAEH,GAhBD;;AAkBA,QAAMG,UAAU,GAAG,MAAK;AAEpB,QAAIC,IAAI,GAAG,EAAX;;AAEA,SAAI,IAAIC,GAAG,GAAC,CAAZ,EAAeA,GAAG,GAACf,QAAnB,EAA4Be,GAAG,EAA/B,EAAkC;AAC9B,UAAGT,KAAK,IAAEL,QAAQ,CAACM,MAAD,CAAR,CAAiBS,EAA3B,EAA8B;AAC1BF,QAAAA,IAAI,CAACF,IAAL,eACI,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,oBACKX,QAAQ,CAACK,KAAD;AADb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKAC,QAAAA,MAAM;AACT,OAPD,MAOK,CAEJ;;AACDD,MAAAA,KAAK;AACR;;AACF,WAAOQ,IAAP;AACF,GAlBD;;AAoBA;AAAA;AAEI;AACA,YAAC,SAAD;AAAW,MAAA,SAAS,EAAC,4DAArB;AAAA,gBAEIN,SAAS;AAFb;AAAA;AAAA;AAAA;AAAA;AAHJ;AAUH,CA3DD;;KAAMT,U;AA6DN,eAAeA,UAAf","sourcesContent":["import React from 'react'\r\nimport {Container, Row, Col} from \"react-bootstrap\"\r\n\r\nconst GridSystem = ({colCount, children}) => {\r\n    let rowcount = Math.floor(children.length / colCount) + 1\r\n    let index =0\r\n    let index2 =0\r\n\r\n    const buildGrid = ()=> {\r\n\r\n        return (renderRows())\r\n    \r\n    }\r\n\r\n    const renderRows = () =>{\r\n        let rows = []\r\n\r\n        for(let row = 0;row<rowcount;row++){\r\n\r\n            rows.push(\r\n                <Row className=\"Row\">\r\n                    {\r\n                        renderCols()\r\n                    }\r\n               </Row>\r\n            )\r\n        }\r\n\r\n        return rows;\r\n\r\n    }                               \r\n\r\n    const renderCols = () =>{\r\n\r\n        let cols = []\r\n\r\n        for(let col=0; col<colCount;col++){\r\n            if(index==children[index2].id){\r\n                cols.push(\r\n                    <Col className=\"Col text-center\">\r\n                        {children[index]}\r\n                    </Col>\r\n                )\r\n                index2++;\r\n            }else{\r\n\r\n            }\r\n            index++\r\n        }\r\n       return cols\r\n    }\r\n\r\n    return (\r\n\r\n        // <Container className=\"container w-50 p-3 position-absolute sticky-top my1\">\r\n        <Container className=\"container w-50 p-3 position-absolute container-grid-syatem\">\r\n            {\r\n            buildGrid()\r\n            }\r\n        </Container>\r\n\r\n    );\r\n};\r\n\r\nexport default GridSystem;\r\n"]},"metadata":{},"sourceType":"module"}