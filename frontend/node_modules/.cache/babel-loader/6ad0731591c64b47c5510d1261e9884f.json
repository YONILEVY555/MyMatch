{"ast":null,"code":"import axios from \"axios\";\n\nconst setupAxiosInterceptors = () => {\n  const instance = axios.create({\n    baseURL: 'http://localhost:8080',\n    timeout: 10000,\n    params: {} // do not remove this, its added to add params later in the config\n\n  });\n  let username = 'in28minutes';\n  let password = 'dummy';\n  let basicAuthHeaderString = 'Basic ' + window.btoa(`${username}:${password}`);\n  thisinstance.interceptors.request.use(config => {\n    if (this.isUserLoggedIn()) {\n      console.log(\"test\");\n      config.headers.authorization = basicAuthHeaderString;\n    }\n\n    return config;\n  });\n};\n\nexport default setupAxiosInterceptors;","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/components/setupAxiosInterceptors.js"],"names":["axios","setupAxiosInterceptors","instance","create","baseURL","timeout","params","username","password","basicAuthHeaderString","window","btoa","thisinstance","interceptors","request","use","config","isUserLoggedIn","console","log","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,sBAAsB,GAAG,MAAK;AAEhC,QAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC1BC,IAAAA,OAAO,EAAE,uBADiB;AAE1BC,IAAAA,OAAO,EAAE,KAFiB;AAG1BC,IAAAA,MAAM,EAAE,EAHkB,CAGf;;AAHe,GAAb,CAAjB;AAMA,MAAIC,QAAQ,GAAG,aAAf;AACA,MAAIC,QAAQ,GAAG,OAAf;AAEA,MAAIC,qBAAqB,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAa,GAAEJ,QAAS,IAAGC,QAAS,EAApC,CAAvC;AACAI,EAAAA,YAAY,CAACC,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsCC,MAAM,IAAI;AACxC,QAAG,KAAKC,cAAL,EAAH,EAAyB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAH,MAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAA+BZ,qBAA/B;AACH;;AACD,WAAOO,MAAP;AACH,GANL;AAOH,CAnBD;;AAqBC,eAAef,sBAAf","sourcesContent":["import axios from \"axios\";\r\nconst setupAxiosInterceptors = ()=> {\r\n\r\n    const instance = axios.create({\r\n        baseURL: 'http://localhost:8080',\r\n        timeout: 10000,\r\n        params: {} // do not remove this, its added to add params later in the config\r\n     });\r\n\r\n    let username = 'in28minutes'\r\n    let password = 'dummy'\r\n\r\n    let basicAuthHeaderString = 'Basic ' + window.btoa(`${username}:${password}`);\r\n    thisinstance.interceptors.request.use(config => {\r\n            if(this.isUserLoggedIn()){\r\n                console.log(\"test\");\r\n                config.headers.authorization = basicAuthHeaderString\r\n            }\r\n            return config\r\n        })\r\n}\r\n \r\n export default setupAxiosInterceptors"]},"metadata":{},"sourceType":"module"}