{"ast":null,"code":"// import axios from \"axios\"\nimport { getAxiosInstance } from \"@api/xhr/Axios\";\nimport { API_URL } from \"@utils/url/Constants\";\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  registerSuccessfulLoginForJwt(phonenumber) {\n    sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME, phonenumber);\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/services/AuthenticationService.js"],"names":["getAxiosInstance","API_URL","USER_NAME_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","username","password","axios","post","createJwtToken","token","registerSuccessfulLoginForJwt","phonenumber","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName"],"mappings":"AACA;AACA,SAAQA,gBAAR,QAA+B,gBAA/B;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AAGA,OAAO,MAAMC,wBAAwB,GAAG,mBAAjC;;AAGP,MAAMC,qBAAN,CAA2B;AAEvBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOC,KAAK,CAACC,IAAN,CAAY,GAAEP,OAAQ,eAAtB,EAAsC;AACzCI,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDG,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,6BAA6B,CAACC,WAAD,EAAa;AACtCC,IAAAA,cAAc,CAACC,OAAf,CAAuBZ,wBAAvB,EAAgDU,WAAhD;AACH;;AAEDG,EAAAA,MAAM,GAAE;AACJF,IAAAA,cAAc,CAACG,UAAf,CAA0Bd,wBAA1B;AACH;;AAEDe,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBjB,wBAAvB,CAAX;AAEA,QAAGgB,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAElB,WAAO,IAAP;AAEH;;AAEDE,EAAAA,mBAAmB,GAAE;AAEjB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBjB,wBAAvB,CAAX;AACA,QAAGgB,IAAI,KAAG,IAAV,EACI,OAAO,EAAP;AAEH,WAAOA,IAAP;AAEJ;;AAtCsB;;AA0C3B,eAAe,IAAIf,qBAAJ,EAAf","sourcesContent":["\r\n// import axios from \"axios\"\r\nimport {getAxiosInstance} from \"@api/xhr/Axios\"\r\nimport {API_URL} from \"@utils/url/Constants\"\r\n\r\n\r\nexport const USER_NAME_ATTRIBUTE_NAME = \"authenticatedUser\"\r\n\r\n\r\nclass AuthenticationService{\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios.post(`${API_URL}/authenticate`, {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(phonenumber){\r\n        sessionStorage.setItem(USER_NAME_ATTRIBUTE_NAME,phonenumber);\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem(USER_NAME_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME)\r\n        \r\n        if(user === null) return false\r\n\r\n        return true\r\n\r\n    }\r\n\r\n    getLoggedInUserName(){\r\n\r\n        let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE_NAME);\r\n        if(user===null) \r\n            return '';\r\n\r\n         return user;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}