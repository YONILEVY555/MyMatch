{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yonil\\\\my-app\\\\src\\\\pages\\\\search_match\\\\SearchMatch.jsx\";\nimport React, { Component } from 'react';\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\";\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\";\nimport { UserDataService } from '@api/index.js';\nimport AuthenticationService from '@services/AuthenticationService.js';\nimport { Color } from '@utils/constants/Color.js';\nimport { NewMatch } from './components/new_match/NewMatch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SearchMatch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.refresh = async () => {\n      var requestParam = {\n        params: {\n          type: \"M\",\n          status: \"S\"\n        }\n      };\n      const resOptionMatches = await UserDataService.getOptionMatches(this.state.id);\n      const resPathes = await UserDataService.getPathes(this.state.id, resOptionMatches.data[0].id);\n      const resMyImages = await UserDataService.getImages(this.state.id);\n      const relationships = await UserDataService.getRelationships(this.state.id, requestParam);\n      this.setState({\n        optionMatches: resOptionMatches.data,\n        pathes: resPathes.data,\n        myImages: resMyImages.data,\n        relationships: relationships.data\n      });\n    };\n\n    this.makeTimer = () => {\n      setInterval(() => {\n        let rand = Math.floor(Math.random() * 10) + 1;\n        this.setState({\n          number: rand\n        });\n      }, 1000);\n    };\n\n    this.likeClicked = async () => {\n      let resPathes = null;\n      let newIndexCurrentMatch = 0;\n      this.createOrUpdateMatch();\n\n      if (this.state.indexCurrentMatch < this.state.optionMatches.length - 1) {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch + 1].id);\n        newIndexCurrentMatch = this.state.indexCurrentMatch + 1;\n      } else {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id);\n      }\n\n      this.setState({\n        indexCurrentMatch: newIndexCurrentMatch,\n        pathes: resPathes.data\n      });\n    };\n\n    this.backClicked = () => {\n      if (this.state.indexCurrentMatch == 0) this.setState(prevstate => ({\n        indexCurrentMatch: this.state.optionMatches.length - 1\n      }));else {\n        this.setState(prevstate => ({\n          indexCurrentMatch: prevstate.indexCurrentMatch - 1\n        }));\n      }\n    };\n\n    this.unlikeClicked = async () => {\n      let resPathes = null;\n      let newIndexCurrentMatch = 0;\n\n      if (this.state.indexCurrentMatch < this.state.optionMatches.length - 1) {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch + 1].id);\n        newIndexCurrentMatch = this.state.indexCurrentMatch + 1;\n      } else {\n        resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id);\n      }\n\n      this.setState({\n        indexCurrentMatch: newIndexCurrentMatch,\n        pathes: resPathes.data\n      });\n    };\n\n    this.getMorePathes = () => {\n      this.setState(prevstate => ({\n        initialIndexPathSearch: prevstate.initialIndexPathSearch + 4\n      }));\n    };\n\n    this.createOrUpdateMatch = async () => {\n      const isFullMatch = this.isFullMatch(this.state.relationships, this.state.optionMatches[this.state.indexCurrentMatch].id);\n      var requestParam = {\n        params: {\n          userId: Number(this.state.id),\n          otherId: this.state.optionMatches[this.state.indexCurrentMatch].id,\n          type: 'MATCH',\n          status: ''\n        }\n      };\n\n      if (isFullMatch) {\n        this.createFullMatch(requestParam);\n      } else {\n        this.createPartialMatch(requestParam);\n      }\n    };\n\n    this.createFullMatch = async requestParam => {\n      requestParam.params.status = 'ACTIVE';\n      await UserDataService.updateRelationship(this.state.id, requestParam);\n      this.setState({\n        flagNewMatch: true\n      });\n    };\n\n    this.createPartialMatch = async requestParam => {\n      requestParam.params.status = 'STANDBY';\n      await UserDataService.createRelationship(this.state.id, requestParam);\n    };\n\n    this.isFullMatch = (relationships, optionMatchId) => {\n      for (let i = 0; i < relationships.length; i++) {\n        if (relationships[i].source.id == optionMatchId || relationships[i].target.id == optionMatchId) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.updateInitialIndexPathSearchToZero = () => {\n      this.setState({\n        initialIndexPathSearch: 0\n      });\n    };\n\n    this.getOptionMatch = () => {\n      let optionMatch;\n      if (this.state.optionMatches != null) optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];else optionMatch = null;\n      return optionMatch;\n    };\n\n    this.getPrevOptionMatch = () => {\n      let PrevOptionMatch;\n\n      if (this.state.optionMatches != null) {\n        if (this.state.indexCurrentMatch == 0) {\n          return null;\n        } else {\n          PrevOptionMatch = this.state.optionMatches[this.state.indexCurrentMatch - 1];\n        }\n      } else {\n        return null;\n      }\n\n      return PrevOptionMatch;\n    };\n\n    this.state = {\n      id: AuthenticationService.getLoggedInUserId(),\n      optionMatches: null,\n      indexCurrentMatch: 0,\n      indexCurrentRelationShip: 0,\n      pathes: null,\n      myImages: null,\n      initialIndexPathSearch: 0,\n      relationships: null,\n      flagNewMatch: false\n    };\n    this.makeTimer();\n  }\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  render() {\n    const optionMatch = this.getOptionMatch();\n    const prevOptionMatch = this.getPrevOptionMatch();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!this.state.flagNewMatch && /*#__PURE__*/_jsxDEV(ViewerNetworkVisualization, {\n        pathes: this.state.pathes,\n        optionMatch: optionMatch,\n        myImages: this.state.myImages,\n        startIndex: this.state.initialIndexPathSearch,\n        updateInitialIndexPathSearchToZero: this.updateInitialIndexPathSearchToZero\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 46\n      }, this), !this.state.flagNewMatch && /*#__PURE__*/_jsxDEV(ViewerPotenMatch, {\n        likeClicked: this.likeClicked,\n        backClicked: this.backClicked,\n        unlikeClicked: this.unlikeClicked,\n        getMorePathes: this.getMorePathes,\n        optionMatch: optionMatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 46\n      }, this), this.state.flagNewMatch && /*#__PURE__*/_jsxDEV(NewMatch, {\n        image: prevOptionMatch.image[0].content,\n        nameMatch: prevOptionMatch.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 45\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SearchMatch;","map":{"version":3,"sources":["C:/Users/yonil/my-app/src/pages/search_match/SearchMatch.jsx"],"names":["React","Component","ViewerNetworkVisualization","ViewerPotenMatch","UserDataService","AuthenticationService","Color","NewMatch","SearchMatch","constructor","props","refresh","requestParam","params","type","status","resOptionMatches","getOptionMatches","state","id","resPathes","getPathes","data","resMyImages","getImages","relationships","getRelationships","setState","optionMatches","pathes","myImages","makeTimer","setInterval","rand","Math","floor","random","number","likeClicked","newIndexCurrentMatch","createOrUpdateMatch","indexCurrentMatch","length","backClicked","prevstate","unlikeClicked","getMorePathes","initialIndexPathSearch","isFullMatch","userId","Number","otherId","createFullMatch","createPartialMatch","updateRelationship","flagNewMatch","createRelationship","optionMatchId","i","source","target","updateInitialIndexPathSearchToZero","getOptionMatch","optionMatch","getPrevOptionMatch","PrevOptionMatch","getLoggedInUserId","indexCurrentRelationShip","componentDidMount","render","prevOptionMatch","image","content","username"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,0BAAP,MAAuC,yEAAvC;AACA,OAAOC,gBAAP,MAA6B,oDAA7B;AACA,SAAQC,eAAR,QAA8B,eAA9B;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AACA,SAAQC,KAAR,QAAoB,2BAApB;AACA,SAAQC,QAAR,QAAuB,iCAAvB;;;AAEA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAEhCQ,EAAAA,WAAW,CAACC,KAAD,EAAO;AACb,UAAMA,KAAN;;AADa,SAoBlBC,OApBkB,GAoBR,YAAW;AAEjB,UAAIC,YAAY,GAAG;AACfC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE,GADA;AAENC,UAAAA,MAAM,EAAE;AAFF;AADO,OAAnB;AAOA,YAAMC,gBAAgB,GAAG,MAAMZ,eAAe,CAACa,gBAAhB,CAAiC,KAAKC,KAAL,CAAWC,EAA5C,CAA/B;AACA,YAAMC,SAAS,GAAG,MAAMhB,eAAe,CAACiB,SAAhB,CAA0B,KAAKH,KAAL,CAAWC,EAArC,EAAyCH,gBAAgB,CAACM,IAAjB,CAAsB,CAAtB,EAAyBH,EAAlE,CAAxB;AACA,YAAMI,WAAW,GAAG,MAAMnB,eAAe,CAACoB,SAAhB,CAA0B,KAAKN,KAAL,CAAWC,EAArC,CAA1B;AACA,YAAMM,aAAa,GAAG,MAAMrB,eAAe,CAACsB,gBAAhB,CAAiC,KAAKR,KAAL,CAAWC,EAA5C,EAA+CP,YAA/C,CAA5B;AAEA,WAAKe,QAAL,CACI;AACIC,QAAAA,aAAa,EAAEZ,gBAAgB,CAACM,IADpC;AAEIO,QAAAA,MAAM,EAAET,SAAS,CAACE,IAFtB;AAGIQ,QAAAA,QAAQ,EAAEP,WAAW,CAACD,IAH1B;AAIIG,QAAAA,aAAa,EAAEA,aAAa,CAACH;AAJjC,OADJ;AAQH,KA1CiB;;AAAA,SA4ClBS,SA5CkB,GA4CN,MAAK;AACbC,MAAAA,WAAW,CAAC,MAAM;AACd,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAA5C;AACE,aAAKT,QAAL,CAAc;AAACU,UAAAA,MAAM,EAAEJ;AAAT,SAAd;AACH,OAHQ,EAGN,IAHM,CAAX;AAIH,KAjDiB;;AAAA,SAmDlBK,WAnDkB,GAmDJ,YAAW;AAErB,UAAIlB,SAAS,GAAG,IAAhB;AACA,UAAImB,oBAAoB,GAAG,CAA3B;AAEA,WAAKC,mBAAL;;AAEA,UAAG,KAAKtB,KAAL,CAAWuB,iBAAX,GAA+B,KAAKvB,KAAL,CAAWU,aAAX,CAAyBc,MAAzB,GAAiC,CAAnE,EAAsE;AAClEtB,QAAAA,SAAS,GAAG,MAAMhB,eAAe,CAACiB,SAAhB,CAA0B,KAAKH,KAAL,CAAWC,EAArC,EAAyC,KAAKD,KAAL,CAAWU,aAAX,CAAyB,KAAKV,KAAL,CAAWuB,iBAAX,GAA6B,CAAtD,EAAyDtB,EAAlG,CAAlB;AACAoB,QAAAA,oBAAoB,GAAG,KAAKrB,KAAL,CAAWuB,iBAAX,GAA+B,CAAtD;AACH,OAHD,MAGK;AACDrB,QAAAA,SAAS,GAAG,MAAMhB,eAAe,CAACiB,SAAhB,CAA0B,KAAKH,KAAL,CAAWC,EAArC,EAAyC,KAAKD,KAAL,CAAWU,aAAX,CAAyB,CAAzB,EAA4BT,EAArE,CAAlB;AACH;;AAED,WAAKQ,QAAL,CACQ;AACEc,QAAAA,iBAAiB,EAAEF,oBADrB;AAEEV,QAAAA,MAAM,EAAET,SAAS,CAACE;AAFpB,OADR;AAMH,KAvEiB;;AAAA,SAyElBqB,WAzEkB,GAyEJ,MAAK;AAEf,UAAG,KAAKzB,KAAL,CAAWuB,iBAAX,IAAgC,CAAnC,EACI,KAAKd,QAAL,CAAciB,SAAS,KACnB;AAAEH,QAAAA,iBAAiB,EAAE,KAAKvB,KAAL,CAAWU,aAAX,CAAyBc,MAAzB,GAAiC;AAAtD,OADmB,CAAvB,EADJ,KAII;AACA,aAAKf,QAAL,CAAciB,SAAS,KACnB;AAAEH,UAAAA,iBAAiB,EAAEG,SAAS,CAACH,iBAAV,GAA8B;AAAnD,SADmB,CAAvB;AAIH;AACJ,KArFiB;;AAAA,SAuFlBI,aAvFkB,GAuFF,YAAW;AAEvB,UAAIzB,SAAS,GAAG,IAAhB;AACA,UAAImB,oBAAoB,GAAG,CAA3B;;AAEA,UAAG,KAAKrB,KAAL,CAAWuB,iBAAX,GAA+B,KAAKvB,KAAL,CAAWU,aAAX,CAAyBc,MAAzB,GAAiC,CAAnE,EAAsE;AAClEtB,QAAAA,SAAS,GAAG,MAAMhB,eAAe,CAACiB,SAAhB,CAA0B,KAAKH,KAAL,CAAWC,EAArC,EAAyC,KAAKD,KAAL,CAAWU,aAAX,CAAyB,KAAKV,KAAL,CAAWuB,iBAAX,GAA6B,CAAtD,EAAyDtB,EAAlG,CAAlB;AACAoB,QAAAA,oBAAoB,GAAG,KAAKrB,KAAL,CAAWuB,iBAAX,GAA+B,CAAtD;AACH,OAHD,MAGK;AACDrB,QAAAA,SAAS,GAAG,MAAMhB,eAAe,CAACiB,SAAhB,CAA0B,KAAKH,KAAL,CAAWC,EAArC,EAAyC,KAAKD,KAAL,CAAWU,aAAX,CAAyB,CAAzB,EAA4BT,EAArE,CAAlB;AACH;;AAED,WAAKQ,QAAL,CACQ;AACEc,QAAAA,iBAAiB,EAAEF,oBADrB;AAEEV,QAAAA,MAAM,EAAET,SAAS,CAACE;AAFpB,OADR;AAOH,KA1GiB;;AAAA,SA4GlBwB,aA5GkB,GA4GF,MAAK;AAEjB,WAAKnB,QAAL,CAAciB,SAAS,KACnB;AACIG,QAAAA,sBAAsB,EAAEH,SAAS,CAACG,sBAAV,GAAmC;AAD/D,OADmB,CAAvB;AAMH,KApHiB;;AAAA,SAsHlBP,mBAtHkB,GAsHI,YAAW;AAE7B,YAAMQ,WAAW,GAAG,KAAKA,WAAL,CAAiB,KAAK9B,KAAL,CAAWO,aAA5B,EAA2C,KAAKP,KAAL,CAAWU,aAAX,CAAyB,KAAKV,KAAL,CAAWuB,iBAApC,EAAuDtB,EAAlG,CAApB;AAEA,UAAIP,YAAY,GAAG;AACfC,QAAAA,MAAM,EAAE;AACJoC,UAAAA,MAAM,EAAEC,MAAM,CAAC,KAAKhC,KAAL,CAAWC,EAAZ,CADV;AAEJgC,UAAAA,OAAO,EAAE,KAAKjC,KAAL,CAAWU,aAAX,CAAyB,KAAKV,KAAL,CAAWuB,iBAApC,EAAuDtB,EAF5D;AAGJL,UAAAA,IAAI,EAAE,OAHF;AAIJC,UAAAA,MAAM,EAAE;AAJJ;AADO,OAAnB;;AASA,UAAIiC,WAAJ,EAAiB;AACb,aAAKI,eAAL,CAAqBxC,YAArB;AACH,OAFD,MAEK;AACD,aAAKyC,kBAAL,CAAwBzC,YAAxB;AACH;AAEJ,KAzIiB;;AAAA,SA2IlBwC,eA3IkB,GA2IA,MAAOxC,YAAP,IAAuB;AAErCA,MAAAA,YAAY,CAACC,MAAb,CAAoBE,MAApB,GAA6B,QAA7B;AAEA,YAAMX,eAAe,CAACkD,kBAAhB,CAAmC,KAAKpC,KAAL,CAAWC,EAA9C,EAAiDP,YAAjD,CAAN;AAEA,WAAKe,QAAL,CAAc;AACV4B,QAAAA,YAAY,EAAE;AADJ,OAAd;AAIH,KArJiB;;AAAA,SAuJlBF,kBAvJkB,GAuJG,MAAOzC,YAAP,IAAuB;AACxCA,MAAAA,YAAY,CAACC,MAAb,CAAoBE,MAApB,GAA6B,SAA7B;AACA,YAAMX,eAAe,CAACoD,kBAAhB,CAAmC,KAAKtC,KAAL,CAAWC,EAA9C,EAAiDP,YAAjD,CAAN;AACH,KA1JiB;;AAAA,SA4JlBoC,WA5JkB,GA4JJ,CAACvB,aAAD,EAAgBgC,aAAhB,KAAiC;AAE3C,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAEjC,aAAa,CAACiB,MAA/B,EAAuCgB,CAAC,EAAxC,EAA4C;AACxC,YAAIjC,aAAa,CAACiC,CAAD,CAAb,CAAiBC,MAAjB,CAAwBxC,EAAxB,IAA8BsC,aAA9B,IAA+ChC,aAAa,CAACiC,CAAD,CAAb,CAAiBE,MAAjB,CAAwBzC,EAAxB,IAA8BsC,aAAjF,EAA+F;AAC3F,iBAAO,IAAP;AACH;AACJ;;AAED,aAAO,KAAP;AAEH,KAtKiB;;AAAA,SAwKlBI,kCAxKkB,GAwKmB,MAAK;AACtC,WAAKlC,QAAL,CAAc;AAACoB,QAAAA,sBAAsB,EAAE;AAAzB,OAAd;AACH,KA1KiB;;AAAA,SA4KlBe,cA5KkB,GA4KD,MAAK;AAElB,UAAIC,WAAJ;AAEA,UAAI,KAAK7C,KAAL,CAAWU,aAAX,IAA4B,IAAhC,EACImC,WAAW,GAAG,KAAK7C,KAAL,CAAWU,aAAX,CAAyB,KAAKV,KAAL,CAAWuB,iBAApC,CAAd,CADJ,KAGIsB,WAAW,GAAG,IAAd;AAEJ,aAAQA,WAAR;AAEH,KAvLiB;;AAAA,SAyLlBC,kBAzLkB,GAyLG,MAAK;AAEtB,UAAIC,eAAJ;;AAEA,UAAI,KAAK/C,KAAL,CAAWU,aAAX,IAA4B,IAAhC,EAAsC;AAClC,YAAI,KAAKV,KAAL,CAAWuB,iBAAX,IAAgC,CAApC,EAAsC;AAClC,iBAAO,IAAP;AACH,SAFD,MAGI;AACAwB,UAAAA,eAAe,GAAG,KAAK/C,KAAL,CAAWU,aAAX,CAAyB,KAAKV,KAAL,CAAWuB,iBAAX,GAA+B,CAAxD,CAAlB;AACH;AACJ,OAPD,MAOK;AACD,eAAO,IAAP;AACH;;AAED,aAAQwB,eAAR;AACH,KAzMiB;;AAEX,SAAK/C,KAAL,GAAa;AACLC,MAAAA,EAAE,EAAEd,qBAAqB,CAAC6D,iBAAtB,EADC;AAELtC,MAAAA,aAAa,EAAE,IAFV;AAGLa,MAAAA,iBAAiB,EAAE,CAHd;AAIL0B,MAAAA,wBAAwB,EAAE,CAJrB;AAKLtC,MAAAA,MAAM,EAAE,IALH;AAMLC,MAAAA,QAAQ,EAAE,IANL;AAOLiB,MAAAA,sBAAsB,EAAE,CAPnB;AAQLtB,MAAAA,aAAa,EAAE,IARV;AASL8B,MAAAA,YAAY,EAAE;AATT,KAAb;AAWC,SAAKxB,SAAL;AACP;;AAEDqC,EAAAA,iBAAiB,GAAE;AACd,SAAKzD,OAAL;AACJ;;AAyLD0D,EAAAA,MAAM,GAAG;AAEL,UAAMN,WAAW,GAAG,KAAKD,cAAL,EAApB;AACA,UAAMQ,eAAe,GAAG,KAAKN,kBAAL,EAAxB;AAEA,wBACI;AAAA,iBAEK,CAAC,KAAK9C,KAAL,CAAWqC,YAAZ,iBAA4B,QAAC,0BAAD;AAA4B,QAAA,MAAM,EAAE,KAAKrC,KAAL,CAAWW,MAA/C;AAC4B,QAAA,WAAW,EAAEkC,WADzC;AAE4B,QAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWY,QAFjD;AAG4B,QAAA,UAAU,EAAE,KAAKZ,KAAL,CAAW6B,sBAHnD;AAI4B,QAAA,kCAAkC,EAAI,KAAKc;AAJvE;AAAA;AAAA;AAAA;AAAA,cAFjC,EAQK,CAAC,KAAK3C,KAAL,CAAWqC,YAAZ,iBAA4B,QAAC,gBAAD;AAAkB,QAAA,WAAW,EAAI,KAAKjB,WAAtC;AACkB,QAAA,WAAW,EAAI,KAAKK,WADtC;AAEkB,QAAA,aAAa,EAAI,KAAKE,aAFxC;AAGkB,QAAA,aAAa,EAAI,KAAKC,aAHxC;AAIkB,QAAA,WAAW,EAAIiB;AAJjC;AAAA;AAAA;AAAA;AAAA,cARjC,EAcK,KAAK7C,KAAL,CAAWqC,YAAX,iBAA2B,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEe,eAAe,CAACC,KAAhB,CAAsB,CAAtB,EAAyBC,OAA1C;AACU,QAAA,SAAS,EAAEF,eAAe,CAACG;AADrC;AAAA;AAAA;AAAA;AAAA,cAdhC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqBH;;AAvO+B;;AA0OpC,eAAejE,WAAf","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport ViewerNetworkVisualization from \"./components/Viewer_network_visualization/ViewerNetworkVisualization.js\"\r\nimport ViewerPotenMatch from \"./components/viewer_potenMatch/ViewerPotenMatch.js\"\r\nimport {UserDataService} from '@api/index.js'\r\nimport AuthenticationService from '@services/AuthenticationService.js'\r\nimport {Color} from '@utils/constants/Color.js'\r\nimport {NewMatch} from './components/new_match/NewMatch'\r\n\r\nclass SearchMatch extends Component {\r\n \r\n    constructor(props){\r\n         super(props)\r\n           this.state = {\r\n                   id: AuthenticationService.getLoggedInUserId(),\r\n                   optionMatches: null,\r\n                   indexCurrentMatch: 0,\r\n                   indexCurrentRelationShip: 0,\r\n                   pathes: null,\r\n                   myImages: null,\r\n                   initialIndexPathSearch: 0,\r\n                   relationships: null,\r\n                   flagNewMatch: false \r\n            }\r\n            this.makeTimer()\r\n    }\r\n\r\n    componentDidMount(){\r\n         this.refresh()\r\n    }\r\n\r\n    refresh = async () =>{\r\n\r\n        var requestParam = {\r\n            params: {\r\n              type: \"M\",\r\n              status: \"S\"\r\n            }\r\n        }\r\n    \r\n        const resOptionMatches = await UserDataService.getOptionMatches(this.state.id); \r\n        const resPathes = await UserDataService.getPathes(this.state.id, resOptionMatches.data[0].id ); \r\n        const resMyImages = await UserDataService.getImages(this.state.id);\r\n        const relationships = await UserDataService.getRelationships(this.state.id,requestParam);\r\n\r\n        this.setState(\r\n            { \r\n                optionMatches: resOptionMatches.data,\r\n                pathes: resPathes.data,\r\n                myImages: resMyImages.data, \r\n                relationships: relationships.data\r\n            }\r\n        )\r\n    }\r\n\r\n    makeTimer = () =>{\r\n        setInterval(() => {\r\n            let rand = Math.floor(Math.random() * 10) + 1\r\n              this.setState({number: rand})\r\n          }, 1000)\r\n    }\r\n\r\n    likeClicked = async () =>{\r\n        \r\n        let resPathes = null\r\n        let newIndexCurrentMatch = 0\r\n\r\n        this.createOrUpdateMatch();\r\n\r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 ){\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch+1].id )\r\n            newIndexCurrentMatch = this.state.indexCurrentMatch + 1 \r\n        }else{\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id )\r\n        }\r\n        \r\n        this.setState(\r\n                { \r\n                  indexCurrentMatch: newIndexCurrentMatch,\r\n                  pathes: resPathes.data \r\n                }\r\n        )\r\n    }\r\n\r\n    backClicked = () =>{\r\n\r\n        if(this.state.indexCurrentMatch == 0 )\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: this.state.optionMatches.length -1}\r\n            ))\r\n        else{\r\n            this.setState(prevstate => (\r\n                { indexCurrentMatch: prevstate.indexCurrentMatch - 1}\r\n            \r\n            ))\r\n        }\r\n    }\r\n\r\n    unlikeClicked = async () =>{\r\n\r\n        let resPathes = null\r\n        let newIndexCurrentMatch = 0\r\n\r\n        if(this.state.indexCurrentMatch < this.state.optionMatches.length -1 ){\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[this.state.indexCurrentMatch+1].id )\r\n            newIndexCurrentMatch = this.state.indexCurrentMatch + 1 \r\n        }else{\r\n            resPathes = await UserDataService.getPathes(this.state.id, this.state.optionMatches[0].id )\r\n        }\r\n        \r\n        this.setState(\r\n                { \r\n                  indexCurrentMatch: newIndexCurrentMatch,\r\n                  pathes: resPathes.data \r\n                }\r\n        ) \r\n\r\n    }  \r\n     \r\n    getMorePathes = () =>{\r\n\r\n        this.setState(prevstate => (\r\n            { \r\n                initialIndexPathSearch: prevstate.initialIndexPathSearch + 4,\r\n            }\r\n        ))\r\n\r\n    }\r\n\r\n    createOrUpdateMatch = async () =>{\r\n\r\n        const isFullMatch = this.isFullMatch(this.state.relationships, this.state.optionMatches[this.state.indexCurrentMatch].id)\r\n\r\n        var requestParam = {\r\n            params: {\r\n                userId: Number(this.state.id) ,\r\n                otherId: this.state.optionMatches[this.state.indexCurrentMatch].id,\r\n                type: 'MATCH' ,\r\n                status: '' \r\n            }\r\n        }\r\n\r\n        if( isFullMatch ){\r\n            this.createFullMatch(requestParam)\r\n        }else{\r\n            this.createPartialMatch(requestParam)\r\n        }\r\n\r\n    }\r\n\r\n    createFullMatch = async (requestParam) =>{\r\n\r\n        requestParam.params.status = 'ACTIVE'\r\n\r\n        await UserDataService.updateRelationship(this.state.id,requestParam);\r\n\r\n        this.setState({\r\n            flagNewMatch: true\r\n        })\r\n\r\n    }\r\n\r\n    createPartialMatch = async (requestParam) =>{\r\n        requestParam.params.status = 'STANDBY'\r\n        await UserDataService.createRelationship(this.state.id,requestParam);\r\n    }\r\n\r\n    isFullMatch = (relationships, optionMatchId) =>{\r\n\r\n        for( let i=0; i< relationships.length; i++ ){\r\n            if( relationships[i].source.id == optionMatchId || relationships[i].target.id == optionMatchId){\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n\r\n    }\r\n\r\n    updateInitialIndexPathSearchToZero = () =>{\r\n        this.setState({initialIndexPathSearch: 0})\r\n    }\r\n\r\n    getOptionMatch = () =>{\r\n\r\n        let optionMatch\r\n\r\n        if( this.state.optionMatches != null )\r\n            optionMatch = this.state.optionMatches[this.state.indexCurrentMatch];\r\n       else\r\n            optionMatch = null;\r\n\r\n        return  optionMatch\r\n\r\n    }\r\n\r\n    getPrevOptionMatch = () =>{\r\n\r\n        let PrevOptionMatch\r\n\r\n        if( this.state.optionMatches != null ){\r\n            if( this.state.indexCurrentMatch == 0){\r\n                return null\r\n            }\r\n            else{\r\n                PrevOptionMatch = this.state.optionMatches[this.state.indexCurrentMatch - 1];\r\n            }\r\n        }else{\r\n            return null\r\n        }\r\n    \r\n        return  PrevOptionMatch\r\n    }\r\n\r\n    render() {\r\n\r\n        const optionMatch = this.getOptionMatch();\r\n        const prevOptionMatch = this.getPrevOptionMatch();\r\n\r\n        return (\r\n            <div>\r\n               \r\n               { !this.state.flagNewMatch && <ViewerNetworkVisualization pathes={this.state.pathes} \r\n                                                                         optionMatch={optionMatch}\r\n                                                                         myImages={this.state.myImages} \r\n                                                                         startIndex={this.state.initialIndexPathSearch}\r\n                                                                         updateInitialIndexPathSearchToZero = {this.updateInitialIndexPathSearchToZero} />} \r\n\r\n               { !this.state.flagNewMatch && <ViewerPotenMatch likeClicked = {this.likeClicked} \r\n                                                               backClicked = {this.backClicked}\r\n                                                               unlikeClicked = {this.unlikeClicked}\r\n                                                               getMorePathes = {this.getMorePathes}\r\n                                                               optionMatch = {optionMatch} />} \r\n\r\n                {this.state.flagNewMatch && <NewMatch image={prevOptionMatch.image[0].content} \r\n                                                      nameMatch={prevOptionMatch.username} />}\r\n                                          \r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchMatch"]},"metadata":{},"sourceType":"module"}